Incomputing,avirtualmachine(VM)isanemulationofacomputersystem.Virtualmachinesarebasedoncomputerarchitecturesandprovidefunctionalityofaphysicalcomputer.Theirimplementationsmayinvolvespecializedhardware,software,oracombination.\nTherearedifferentkindsofvirtualmachines,eachwithdifferentfunctions:\nSomevirtualmachines,suchasQEMU,aredesignedtoalsoemulatedifferentarchitecturesandallowexecutionofsoftwareapplicationsandoperatingsystemswrittenforanotherCPUorarchitecture.Operating-system-levelvirtualizationallowstheresourcesofacomputertobepartitionedviathekernel\'ssupportformultipleisolateduserspaceinstances,whichareusuallycalledcontainersandmaylookandfeellikerealmachinestotheendusers.\nA"virtualmachine"wasoriginallydefinedbyPopekandGoldbergas"anefficient,isolatedduplicateofarealcomputermachine."[1]Currentuseincludesvirtualmachinesthathavenodirectcorrespondencetoanyrealhardware.[2]\nThephysical,"real-world"hardwarerunningtheVMisgenerallyreferredtoasthe\'host\',andthevirtualmachineemulatedonthatmachineisgenerallyreferredtoasthe\'guest\'.Ahostcanemulateseveralguests,eachofwhichcanemulatedifferentoperatingsystemsandhardwareplatforms.\nThedesiretorunmultipleoperatingsystemswastheinitialmotiveforvirtualmachines,soastoallowtime-sharingamongseveralsingle-taskingoperatingsystems.Insomerespects,asystemvirtualmachinecanbeconsideredageneralizationoftheconceptofvirtualmemorythathistoricallyprecededit.IBM\'sCP/CMS,thefirstsystemstoallowfullvirtualization,implementedtimesharingbyprovidingeachuserwithasingle-useroperatingsystem,theConversationalMonitorSystem(CMS).Unlikevirtualmemory,asystemvirtualmachineentitledtheusertowriteprivilegedinstructionsintheircode.Thisapproachhadcertainadvantages,suchasaddinginput/outputdevicesnotallowedbythestandardsystem.[3]\nAstechnologyevolvesvirtualmemoryforpurposesofvirtualization,newsystemsofmemoryovercommitmentmaybeappliedtomanagememorysharingamongmultiplevirtualmachinesononecomputeroperatingsystem.Itmaybepossibletosharememorypagesthathaveidenticalcontentsamongmultiplevirtualmachinesthatrunonthesamephysicalmachine,whatmayresultinmappingthemtothesamephysicalpagebyatechniquetermedkernelsame-pagemerging(KSM).Thisisespeciallyusefulforread-onlypages,suchasthoseholdingcodesegments,whichisthecaseformultiplevirtualmachinesrunningthesameorsimilarsoftware,softwarelibraries,webservers,middlewarecomponents,etc.Theguestoperatingsystemsdonotneedtobecompliantwiththehosthardware,thusmakingitpossibletorundifferentoperatingsystemsonthesamecomputer(e.g.,Windows,Linux,orpriorversionsofanoperatingsystem)tosupportfuturesoftware.[4]\nTheuseofvirtualmachinestosupportseparateguestoperatingsystemsispopularinregardtoembeddedsystems.Atypicalusewouldbetorunareal-timeoperatingsystemsimultaneouslywithapreferredcomplexoperatingsystem,suchasLinuxorWindows.Anotherusewouldbefornovelandunprovensoftwarestillinthedevelopmentalstage,soitrunsinsideasandbox.Virtualmachineshaveotheradvantagesforoperatingsystemdevelopmentandmayincludeimproveddebuggingaccessandfasterreboots.[5]\nMultipleVMsrunningtheirownguestoperatingsystemarefrequentlyengagedforserverconsolidation.[6]\nAprocessVM,sometimescalledanapplicationvirtualmachine,orManagedRuntimeEnvironment(MRE),runsasanormalapplicationinsideahostOSandsupportsasingleprocess.Itiscreatedwhenthatprocessisstartedanddestroyedwhenitexits.Itspurposeistoprovideaplatform-independentprogrammingenvironmentthatabstractsawaydetailsoftheunderlyinghardwareoroperatingsystemandallowsaprogramtoexecuteinthesamewayonanyplatform.\nAprocessVMprovidesahigh-levelabstraction –thatofahigh-levelprogramminglanguage(comparedtothelow-levelISAabstractionofthesystemVM).ProcessVMsareimplementedusinganinterpreter;performancecomparabletocompiledprogramminglanguagescanbeachievedbytheuseofjust-in-timecompilation.[citationneeded]\nThistypeofVMhasbecomepopularwiththeJavaprogramminglanguage,whichisimplementedusingtheJavavirtualmachine.OtherexamplesincludetheParrotvirtualmachineandthe.NETFramework,whichrunsonaVMcalledtheCommonLanguageRuntime.Allofthemcanserveasanabstractionlayerforanycomputerlanguage.\nAspecialcaseofprocessVMsaresystemsthatabstractoverthecommunicationmechanismsofa(potentiallyheterogeneous)computercluster.SuchaVMdoesnotconsistofasingleprocess,butoneprocessperphysicalmachineinthecluster.TheyaredesignedtoeasethetaskofprogrammingconcurrentapplicationsbylettingtheprogrammerfocusonalgorithmsratherthanthecommunicationmechanismsprovidedbytheinterconnectandtheOS.Theydonothidethefactthatcommunicationtakesplace,andassuchdonotattempttopresenttheclusterasasinglemachine.[citationneeded]\nUnlikeotherprocessVMs,thesesystemsdonotprovideaspecificprogramminglanguage,butareembeddedinanexistinglanguage;typicallysuchasystemprovidesbindingsforseverallanguages(e.g.,CandFortran).[citationneeded]ExamplesareParallelVirtualMachine(PVM)andMessagePassingInterface(MPI).TheyarenotstrictlyvirtualmachinesbecausetheapplicationsrunningontopstillhaveaccesstoallOSservicesandarethereforenotconfinedtothesystemmodel.\nBothsystemvirtualmachinesandprocessvirtualmachinesdatetothe1960sandcontinuetobeareasofactivedevelopment.\nSystemvirtualmachinesgrewoutoftime-sharing,asnotablyimplementedintheCompatibleTime-SharingSystem(CTSS).Time-sharingallowedmultipleuserstouseacomputerconcurrently:eachprogramappearedtohavefullaccesstothemachine,butonlyoneprogramwasexecutedatthetime,withthesystemswitchingbetweenprogramsintimeslices,savingandrestoringstateeachtime.Thisevolvedintovirtualmachines,notablyviaIBM\'sresearchsystems:theM44/44X,whichusedpartialvirtualization,andtheCP-40andSIMMON,whichusedfullvirtualization,andwereearlyexamplesofhypervisors.ThefirstwidelyavailablevirtualmachinearchitecturewastheCP-67/CMS(seeHistoryofCP/CMSfordetails).Animportantdistinctionwasbetweenusingmultiplevirtualmachinesononehostsystemfortime-sharing,asinM44/44XandCP-40,andusingonevirtualmachineonahostsystemforprototyping,asinSIMMON.Emulators,withhardwareemulationofearliersystemsforcompatibility,datebacktotheIBMSystem/360in1963,[7][8]whilethesoftwareemulation(then-called"simulation")predatesit.\nProcessvirtualmachinesaroseoriginallyasabstractplatformsforanintermediatelanguageusedastheintermediaterepresentationofaprogrambyacompiler;earlyexamplesdatetoaround1966.Anearly1966examplewastheO-codemachine,avirtualmachinethatexecutesO-code(objectcode)emittedbythefrontendoftheBCPLcompiler.ThisabstractionallowedthecompilertobeeasilyportedtoanewarchitecturebyimplementinganewbackendthattooktheexistingO-codeandcompiledittomachinecodefortheunderlyingphysicalmachine.TheEulerlanguageusedasimilardesign,withtheintermediatelanguagenamedP(portable).[9]Thiswaspopularizedaround1970byPascal,notablyinthePascal-Psystem(1973)andPascal-Scompiler(1975),inwhichitwastermedp-codeandtheresultingmachineasap-codemachine.Thishasbeeninfluential,andvirtualmachinesinthissensehavebeenoftengenerallycalledp-codemachines.Inadditiontobeinganintermediatelanguage,Pascalp-codewasalsoexecuteddirectlybyaninterpreterimplementingthevirtualmachine,notablyinUCSDPascal(1978);thisinfluencedlaterinterpreters,notablytheJavavirtualmachine(JVM).AnotherearlyexamplewasSNOBOL4(1967),whichwaswrittenintheSNOBOLImplementationLanguage(SIL),anassemblylanguageforavirtualmachine,whichwasthentargetedtophysicalmachinesbytranspilingtotheirnativeassemblerviaamacroassembler.[10]Macroshavesincefallenoutoffavor,however,sothisapproachhasbeenlessinfluential.Processvirtualmachineswereapopularapproachtoimplementingearlymicrocomputersoftware,includingTinyBASICandadventuregames,fromone-offimplementationssuchasPyramid2000toageneral-purposeenginelikeInfocom\'sz-machine,whichGrahamNelsonarguesis"possiblythemostportablevirtualmachineevercreated".[11]\nSignificantadvancesoccurredintheimplementationofSmalltalk-80,[12]\nparticularlytheDeutsch/Schiffmannimplementation[13]\nwhichpushedjust-in-time(JIT)compilationforwardasanimplementationapproachthatusesprocessvirtualmachine.[14]\nLaternotableSmalltalkVMswereVisualWorks,theSqueakVirtualMachine,[15]\nandStrongtalk.[16]\nArelatedlanguagethatproducedalotofvirtualmachineinnovationwastheSelfprogramminglanguage,[17]\nwhichpioneeredadaptiveoptimization[18]\nandgenerationalgarbagecollection.Thesetechniquesprovedcommerciallysuccessfulin1999intheHotSpotJavavirtualmachine.[19]\nOtherinnovationsincludehavingaregister-basedvirtualmachine,tobettermatchtheunderlyinghardware,ratherthanastack-basedvirtualmachine,whichisaclosermatchfortheprogramminglanguage;in1995,thiswaspioneeredbytheDisvirtualmachinefortheLimbolanguage.\nInfullvirtualization,thevirtualmachinesimulatesenoughhardwaretoallowanunmodified"guest"OS(onedesignedforthesameinstructionset)toberuninisolation.Thisapproachwaspioneeredin1966withtheIBMCP-40andCP-67,predecessorsoftheVMfamily.\nExamplesoutsidethemainframefieldincludeParallelsWorkstation,ParallelsDesktopforMac,VirtualBox,VirtualIron,OracleVM,VirtualPC,VirtualServer,Hyper-V,VMwareWorkstation,VMwareServer(discontinued,formerlycalledGSXServer),VMwareESXi,QEMU,Adeos,Mac-on-Linux,Win4BSD,Win4LinPro,andEgeneravBladetechnology.\nInhardware-assistedvirtualization,thehardwareprovidesarchitecturalsupportthatfacilitatesbuildingavirtualmachinemonitorandallowsguestOSestoberuninisolation.[20]Hardware-assistedvirtualizationwasfirstintroducedontheIBMSystem/370in1972,[citationneeded]forusewithVM/370,thefirstvirtualmachineoperatingsystemofferedbyIBMasanofficialproduct.\nIn2005and2006,IntelandAMDprovidedadditionalhardwaretosupportvirtualization.SunMicrosystems(nowOracleCorporation)addedsimilarfeaturesintheirUltraSPARCT-Seriesprocessorsin2005.ExamplesofvirtualizationplatformsadaptedtosuchhardwareincludeKVM,VMwareWorkstation,VMwareFusion,Hyper-V,WindowsVirtualPC,Xen,ParallelsDesktopforMac,OracleVMServerforSPARC,VirtualBoxandParallelsWorkstation.\nIn2006,first-generation32-and64-bitx86hardwaresupportwasfoundtorarelyofferperformanceadvantagesoversoftwarevirtualization.[21]\nInoperating-system-levelvirtualization,aphysicalserverisvirtualizedattheoperatingsystemlevel,enablingmultipleisolatedandsecurevirtualizedserverstorunonasinglephysicalserver.The"guest"operatingsystemenvironmentssharethesamerunninginstanceoftheoperatingsystemasthehostsystem.Thus,thesameoperatingsystemkernelisalsousedtoimplementthe"guest"environments,andapplicationsrunninginagiven"guest"environmentviewitasastand-alonesystem.ThepioneerimplementationwasFreeBSDjails;otherexamplesincludeDocker,SolarisContainers,OpenVZ,Linux-VServer,LXC,AIXWorkloadPartitions,ParallelsVirtuozzoContainers,andiCoreVirtualAccounts.\n