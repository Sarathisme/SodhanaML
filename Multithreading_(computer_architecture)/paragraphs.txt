Incomputerarchitecture,multithreadingistheabilityofacentralprocessingunit(CPU)(orasinglecoreinamulti-coreprocessor)toexecutemultipleprocessesorthreadsconcurrently,supportedbytheoperatingsystem.Thisapproachdiffersfrommultiprocessing.Inamultithreadedapplication,theprocessesandthreadssharetheresourcesofasingleormultiplecores,whichincludethecomputingunits,theCPUcaches,andthetranslationlookasidebuffer(TLB).\nWheremultiprocessingsystemsincludemultiplecompleteprocessingunitsinoneormorecores,multithreadingaimstoincreaseutilizationofasinglecorebyusingthread-levelparallelism,aswellasinstruction-levelparallelism.Asthetwotechniquesarecomplementary,theyaresometimescombinedinsystemswithmultiplemultithreadingCPUsandwithCPUswithmultiplemultithreadingcores.\nThemultithreadingparadigmhasbecomemorepopularaseffortstofurtherexploitinstruction-levelparallelismhavestalledsincethelate1990s.Thisallowedtheconceptofthroughputcomputingtore-emergefromthemorespecializedfieldoftransactionprocessing.Eventhoughitisverydifficulttofurtherspeedupasinglethreadorsingleprogram,mostcomputersystemsareactuallymultitaskingamongmultiplethreadsorprograms.Thus,techniquesthatimprovethethroughputofalltasksresultinoverallperformancegains.\nTwomajortechniquesforthroughputcomputingaremultithreadingandmultiprocessing.\nIfathreadgetsalotofcachemisses,theotherthreadscancontinuetakingadvantageoftheunusedcomputingresources,whichmayleadtofasteroverallexecution,astheseresourceswouldhavebeenidleifonlyasinglethreadwereexecuted.Also,ifathreadcannotuseallthecomputingresourcesoftheCPU(becauseinstructionsdependoneachother\'sresult),runninganotherthreadmaypreventthoseresourcesfrombecomingidle.\nMultiplethreadscaninterferewitheachotherwhensharinghardwareresourcessuchascachesortranslationlookasidebuffers(TLBs).Asaresult,executiontimesofasinglethreadarenotimprovedandcanbedegraded,evenwhenonlyonethreadisexecuting,duetolowerfrequenciesoradditionalpipelinestagesthatarenecessarytoaccommodatethread-switchinghardware.\nOverallefficiencyvaries;Intelclaimsupto30%improvementwithitsHyper-ThreadingTechnology,[1]whileasyntheticprogramjustperformingaloopofnon-optimizeddependentfloating-pointoperationsactuallygainsa100%speedimprovementwhenruninparallel.Ontheotherhand,hand-tunedassemblylanguageprogramsusingMMXorAltiVecextensionsandperformingdataprefetches(asagoodvideoencodermight)donotsufferfromcachemissesoridlecomputingresources.Suchprogramsthereforedonotbenefitfromhardwaremultithreadingandcanindeedseedegradedperformanceduetocontentionforsharedresources.\nFromthesoftwarestandpoint,hardwaresupportformultithreadingismorevisibletosoftware,requiringmorechangestobothapplicationprogramsandoperatingsystemsthanmultiprocessing.Hardwaretechniquesusedtosupportmultithreadingoftenparallelthesoftwaretechniquesusedforcomputermultitasking.Threadschedulingisalsoamajorprobleminmultithreading.\nThesimplesttypeofmultithreadingoccurswhenonethreadrunsuntilitisblockedbyaneventthatnormallywouldcreatealong-latencystall.Suchastallmightbeacachemissthathastoaccessoff-chipmemory,whichmighttakehundredsofCPUcyclesforthedatatoreturn.Insteadofwaitingforthestalltoresolve,athreadedprocessorwouldswitchexecutiontoanotherthreadthatwasreadytorun.Onlywhenthedataforthepreviousthreadhadarrived,wouldthepreviousthreadbeplacedbackonthelistofready-to-runthreads.\nForexample:\nConceptually,itissimilartocooperativemulti-taskingusedinreal-timeoperatingsystems,inwhichtasksvoluntarilygiveupexecutiontimewhentheyneedtowaituponsometypeoftheevent.Thistypeofmultithreadingisknownasblock,cooperativeorcoarse-grainedmultithreading.\nThegoalofmultithreadinghardwaresupportistoallowquickswitchingbetweenablockedthreadandanotherthreadreadytorun.Toachievethisgoal,thehardwarecostistoreplicatetheprogramvisibleregisters,aswellassomeprocessorcontrolregisters(suchastheprogramcounter).Switchingfromonethreadtoanotherthreadmeansthehardwareswitchesfromusingoneregistersettoanother;toswitchefficientlybetweenactivethreads,eachactivethreadneedstohaveitsownregisterset.Forexample,toquicklyswitchbetweentwothreads,theregisterhardwareneedstobeinstantiatedtwice.\nAdditionalhardwaresupportformultithreadingallowsthreadswitchingtobedoneinoneCPUcycle,bringingperformanceimprovements.Also,additionalhardwareallowseachthreadtobehaveasifitwereexecutingaloneandnotsharinganyhardwareresourceswithotherthreads,minimizingtheamountofsoftwarechangesneededwithintheapplicationandtheoperatingsystemtosupportmultithreading.\nManyfamiliesofmicrocontrollersandembeddedprocessorshavemultipleregisterbankstoallowquickcontextswitchingforinterrupts.Suchschemescanbeconsideredatypeofblockmultithreadingamongtheuserprogramthreadandtheinterruptthreads.[citationneeded]\nThepurposeofinterleavedmultithreadingistoremovealldatadependencystallsfromtheexecutionpipeline.Sinceonethreadisrelativelyindependentfromotherthreads,thereislesschanceofoneinstructioninonepipeliningstageneedinganoutputfromanolderinstructioninthepipeline.Conceptually,itissimilartopreemptivemultitaskingusedinoperatingsystems;ananalogywouldbethatthetimeslicegiventoeachactivethreadisoneCPUcycle.\nForexample:\nThistypeofmultithreadingwasfirstcalledbarrelprocessing,inwhichthestavesofabarrelrepresentthepipelinestagesandtheirexecutingthreads.Interleaved,preemptive,fine-grainedortime-slicedmultithreadingaremoremodernterminology.\nInadditiontothehardwarecostsdiscussedintheblocktypeofmultithreading,interleavedmultithreadinghasanadditionalcostofeachpipelinestagetrackingthethreadIDoftheinstructionitisprocessing.Also,sincetherearemorethreadsbeingexecutedconcurrentlyinthepipeline,sharedresourcessuchascachesandTLBsneedtobelargertoavoidthrashingbetweenthedifferentthreads.\nThemostadvancedtypeofmultithreadingappliestosuperscalarprocessors.WhereasanormalsuperscalarprocessorissuesmultipleinstructionsfromasinglethreadeveryCPUcycle,insimultaneousmultithreading(SMT)asuperscalarprocessorcanissueinstructionsfrommultiplethreadseveryCPUcycle.Recognizingthatanysinglethreadhasalimitedamountofinstruction-levelparallelism,thistypeofmultithreadingtriestoexploitparallelismavailableacrossmultiplethreadstodecreasethewasteassociatedwithunusedissueslots.\nForexample:\nTodistinguishtheothertypesofmultithreadingfromSMT,theterm"temporalmultithreading"isusedtodenotewheninstructionsfromonlyonethreadcanbeissuedatatime.\nInadditiontothehardwarecostsdiscussedforinterleavedmultithreading,SMThastheadditionalcostofeachpipelinestagetrackingthethreadIDofeachinstructionbeingprocessed.Again,sharedresourcessuchascachesandTLBshavetobesizedforthelargenumberofactivethreadsbeingprocessed.\nImplementationsincludeDEC(laterCompaq)EV8(notcompleted),IntelHyper-ThreadingTechnology,IBMPOWER5,SunMicrosystemsUltraSPARCT2,CrayXMT,andAMDBulldozerandZenmicroarchitectures.\nAmajorareaofresearchisthethreadschedulerthatmustquicklychoosefromamongthelistofready-to-runthreadstoexecutenext,aswellasmaintaintheready-to-runandstalledthreadlists.Animportantsubtopicisthedifferentthreadpriorityschemesthatcanbeusedbythescheduler.Thethreadschedulermightbeimplementedtotallyinsoftware,totallyinhardware,orasahardware/softwarecombination.\nAnotherareaofresearchiswhattypeofeventsshouldcauseathreadswitch:cachemisses,inter-threadcommunication,DMAcompletion,etc.\nIfthemultithreadingschemereplicatesallofthesoftware-visiblestate,includingprivilegedcontrolregistersandTLBs,thenitenablesvirtualmachinestobecreatedforeachthread.Thisallowseachthreadtorunitsownoperatingsystemonthesameprocessor.Ontheotherhand,ifonlyuser-modestateissaved,thenlesshardwareisrequired,whichwouldallowmorethreadstobeactiveatonetimeforthesamedieareaorcost.\n