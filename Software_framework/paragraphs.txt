Incomputerprogramming,asoftwareframeworkisanabstractioninwhichsoftwareprovidinggenericfunctionalitycanbeselectivelychangedbyadditionaluser-writtencode,thusprovidingapplication-specificsoftware.Asoftwareframeworkprovidesastandardwaytobuildanddeployapplications.\nAsoftwareframeworkisauniversal,reusablesoftwareenvironmentthatprovidesparticularfunctionalityaspartofalargersoftwareplatformtofacilitatedevelopmentofsoftwareapplications,productsandsolutions.Softwareframeworksmayincludesupportprograms,compilers,codelibraries,toolsets,andapplicationprogramminginterfaces(APIs)thatbringtogetherallthedifferentcomponentstoenabledevelopmentofaprojectorsystem.\nFrameworkshavekeydistinguishingfeaturesthatseparatethemfromnormallibraries:\nThedesignersofsoftwareframeworksaimtofacilitatesoftwaredevelopmentsbyallowingdesignersandprogrammerstodevotetheirtimetomeetingsoftwarerequirementsratherthandealingwiththemorestandardlow-leveldetailsofprovidingaworkingsystem,therebyreducingoveralldevelopmenttime.[2]Forexample,ateamusingawebframeworktodevelopabankingwebsitecanfocusonwritingcodeparticulartobankingratherthanthemechanicsofrequesthandlingandstatemanagement.\nFrameworksoftenaddtothesizeofprograms,aphenomenontermed"codebloat".Duetocustomer-demanddrivenapplicationsneeds,bothcompetingandcomplementaryframeworkssometimesendupinaproduct.Further,duetothecomplexityoftheirAPIs,theintendedreductioninoveralldevelopmenttimemaynotbeachievedduetotheneedtospendadditionaltimelearningtousetheframework;thiscriticismisclearlyvalidwhenaspecialornewframeworkisfirstencounteredbydevelopmentstaff.[citationneeded]Ifsuchaframeworkisnotusedinsubsequentjobtaskings,thetimeinvestedinlearningtheframeworkcancostmorethanpurpose-writtencodefamiliartotheproject\'sstaff;manyprogrammerskeepcopiesofusefulboilerplateforcommonneeds.\nHowever,onceaframeworkislearned,futureprojectscanbefasterandeasiertocomplete;theconceptofaframeworkistomakeaone-size-fits-allsolutionset,andwithfamiliarity,codeproductionshouldlogicallyrise.Therearenosuchclaimsmadeaboutthesizeofthecodeeventuallybundledwiththeoutputproduct,noritsrelativeefficiencyandconciseness.Usinganylibrarysolutionnecessarilypullsinextrasandunusedextraneousassetsunlessthesoftwareisacompiler-objectlinkermakingatight(small,whollycontrolled,andspecified)executablemodule.\nTheissuecontinues,butadecade-plusofindustryexperience[citationneeded]hasshownthatthemosteffectiveframeworksturnouttobethosethatevolvefromre-factoringthecommoncodeoftheenterprise,insteadofusingageneric"one-size-fits-all"frameworkdevelopedbythirdpartiesforgeneralpurposes.Anexampleofthatwouldbehowtheuserinterfaceinsuchanapplicationpackageasanofficesuitegrowstohavecommonlook,feel,anddata-sharingattributesandmethods,astheoncedisparatebundledapplicationsgrowunifiedintoasuitewhichistighterandsmaller;thenewer/evolvedsuitecanbeaproductthatsharesintegralutilitylibrariesanduserinterfaces.\nThistrendinthecontroversybringsupanimportantissueaboutframeworks.Creatingaframeworkthatiselegant,versusonethatmerelysolvesaproblem,isstillanartratherthanascience."Softwareelegance"impliesclarity,conciseness,andlittlewaste(extraorextraneousfunctionality,muchofwhichisuserdefined).Forthoseframeworksthatgeneratecode,forexample,"elegance"wouldimplythecreationofcodethatiscleanandcomprehensibletoareasonablyknowledgeableprogrammer(andwhichisthereforereadilymodifiable),versusonethatmerelygeneratescorrectcode.Theeleganceissueiswhyrelativelyfewsoftwareframeworkshavestoodthetestoftime:thebestframeworkshavebeenabletoevolvegracefullyastheunderlyingtechnologyonwhichtheywerebuiltadvanced.Eventhere,havingevolved,manysuchpackageswillretainlegacycapabilitiesbloatingthefinalsoftwareasotherwisereplacedmethodshavebeenretainedinparallelwiththenewermethods.\nSoftwareframeworkstypicallycontainconsiderablehousekeepingandutilitycodeinordertohelpbootstrapuserapplications,butgenerallyfocusonspecificproblemdomains,suchas:\nAccordingtoPree,[8]softwareframeworksconsistoffrozenspotsandhotspots.Frozenspotsdefinetheoverallarchitectureofasoftwaresystem,thatistosayitsbasiccomponentsandtherelationshipsbetweenthem.Theseremainunchanged(frozen)inanyinstantiationoftheapplicationframework.Hotspotsrepresentthosepartswheretheprogrammersusingtheframeworkaddtheirowncodetoaddthefunctionalityspecifictotheirownproject.\nInanobject-orientedenvironment,aframeworkconsistsofabstractandconcreteclasses.Instantiationofsuchaframeworkconsistsofcomposingandsubclassingtheexistingclasses.[9]\nWhendevelopingaconcretesoftwaresystemwithasoftwareframework,developersutilizethehotspotsaccordingtothespecificneedsandrequirementsofthesystem.SoftwareframeworksrelyontheHollywoodPrinciple:"Don\'tcallus,we\'llcallyou."[10]Thismeansthattheuser-definedclasses(forexample,newsubclasses)receivemessagesfromthepredefinedframeworkclasses.Developersusuallyhandlethisbyimplementingsuperclassabstractmethods.\n\n