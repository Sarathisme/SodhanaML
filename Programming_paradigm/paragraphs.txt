Programmingparadigmsareawaytoclassifyprogramminglanguagesbasedontheirfeatures.Languagescanbeclassifiedintomultipleparadigms.\nSomeparadigmsareconcernedmainlywithimplicationsfortheexecutionmodelofthelanguage,suchasallowingsideeffects,orwhetherthesequenceofoperationsisdefinedbytheexecutionmodel.Otherparadigmsareconcernedmainlywiththewaythatcodeisorganized,suchasgroupingacodeintounitsalongwiththestatethatismodifiedbythecode.Yetothersareconcernedmainlywiththestyleofsyntaxandgrammar.\nCommonprogrammingparadigmsinclude:[1][2][3]\nSymbolictechniquessuchasreflection,whichallowtheprogramtorefertoitself,mightalsobeconsideredasaprogrammingparadigm.However,thisiscompatiblewiththemajorparadigmsandthusisnotarealparadigminitsownright.\nForexample,languagesthatfallintotheimperativeparadigmhavetwomainfeatures:theystatetheorderinwhichoperationsoccur,withconstructsthatexplicitlycontrolthatorder,andtheyallowsideeffects,inwhichstatecanbemodifiedatonepointintime,withinoneunitofcode,andthenlaterreadatadifferentpointintimeinsideadifferentunitofcode.Thecommunicationbetweentheunitsofcodeisnotexplicit.Meanwhile,inobject-orientedprogramming,codeisorganizedintoobjectsthatcontainstatethatisonlymodifiedbythecodethatispartoftheobject.Mostobject-orientedlanguagesarealsoimperativelanguages.Incontrast,languagesthatfitthedeclarativeparadigmdonotstatetheorderinwhichtoexecuteoperations.Instead,theysupplyanumberofoperationsthatareavailableinthesystem,alongwiththeconditionsunderwhicheachisallowedtoexecute.Theimplementationofthelanguage\'sexecutionmodeltrackswhichoperationsarefreetoexecuteandchoosestheorderonitsown.MoreatComparisonofmulti-paradigmprogramminglanguages.\nJustassoftwareengineering(asaprocess)isdefinedbydifferingmethodologies,sotheprogramminglanguages(asmodelsofcomputation)aredefinedbydifferingparadigms.Somelanguagesaredesignedtosupportoneparadigm(Smalltalksupportsobject-orientedprogramming,Haskellsupportsfunctionalprogramming),whileotherprogramminglanguagessupportmultipleparadigms(suchasObjectPascal,C++,Java,C#,Scala,VisualBasic,CommonLisp,Scheme,Perl,PHP,Python,Ruby,Oz,andF#).Forexample,programswritteninC++,ObjectPascalorPHPcanbepurelyprocedural,purelyobject-oriented,orcancontainelementsofbothorotherparadigms.Softwaredesignersandprogrammersdecidehowtousethoseparadigmelements.\nInobject-orientedprogramming,programsaretreatedasasetofinteractingobjects.Infunctionalprogramming,programsaretreatedasasequenceofstatelessfunctionevaluations.Whenprogrammingcomputersorsystemswithmanyprocessors,inprocess-orientedprogramming,programsaretreatedassetsofconcurrentprocessesactingonlogicallyshareddatastructures.\nManyprogrammingparadigmsareaswellknownforthetechniquestheyforbidasforthosetheyenable.Forinstance,purefunctionalprogrammingdisallowsuseofside-effects,whilestructuredprogrammingdisallowsuseofthegotostatement.Partlyforthisreason,newparadigmsareoftenregardedasdoctrinaireoroverlyrigidbythoseaccustomedtoearlierstyles.[6]Yet,avoidingcertaintechniquescanmakeiteasiertounderstandprogrambehavior,andtoprovetheoremsaboutprogramcorrectness.\nProgrammingparadigmscanalsobecomparedwithprogrammingmodelswhichallowinvokinganexecutionmodelbyusingonlyanAPI.Programmingmodelscanalsobeclassifiedintoparadigms,basedonfeaturesoftheexecutionmodel.\nForparallelcomputing,usingaprogrammingmodelinsteadofalanguageiscommon.Thereasonisthatdetailsoftheparallelhardwareleakintotheabstractionsusedtoprogramthehardware.Thiscausestheprogrammertohavetomappatternsinthealgorithmontopatternsintheexecutionmodel(whichhavebeeninsertedduetoleakageofhardwareintotheabstraction).Asaconsequence,nooneparallelprogramminglanguagemapswelltoallcomputationproblems.ItisthusmoreconvenienttouseabasesequentiallanguageandinsertAPIcallstoparallelexecutionmodels,viaaprogrammingmodel.Suchparallelprogrammingmodelscanbeclassifiedaccordingtoabstractionsthatreflectthehardware,suchassharedmemory,distributedmemorywithmessagepassing,notionsofplacevisibleinthecode,andsoforth.Thesecanbeconsideredflavorsofprogrammingparadigmthatapplytoonlyparallellanguagesandprogrammingmodels.\nSomeprogramminglanguageresearcherscriticisethenotionofparadigmsasaclassificationofprogramminglanguages,e.g.Harper,[7]andKrishnamurthi.[8]Theyarguethatmanyprogramminglanguagescannotbestrictlyclassifiedintooneparadigm,butratherincludefeaturesfromseveralparadigms.SeeComparisonofmulti-paradigmprogramminglanguages.\nDifferentapproachestoprogramminghavedevelopedovertime,beingidentifiedassucheitheratthetimeorretrospectively.Anearlyapproachconsciouslyidentifiedassuchisstructuredprogramming,advocatedsincethemid1960s.Theconceptofa"programmingparadigm"assuchdatesatleastto1978,intheTuringAwardlectureofRobertW.Floyd,entitledTheParadigmsofProgramming,whichcitesthenotionofparadigmasusedbyThomasKuhninhisTheStructureofScientificRevolutions(1962).[9]\nThelowest-levelprogrammingparadigmsaremachinecode,whichdirectlyrepresentstheinstructions(thecontentsofprogrammemory)asasequenceofnumbers,andassemblylanguagewherethemachineinstructionsarerepresentedbymnemonicsandmemoryaddressescanbegivensymboliclabels.Thesearesometimescalledfirst-andsecond-generationlanguages.\nInthe1960s,assemblylanguagesweredevelopedtosupportlibraryCOPYandquitesophisticatedconditionalmacrogenerationandpreprocessingabilities,CALLto(subroutines),externalvariablesandcommonsections(globals),enablingsignificantcodere-useandisolationfromhardwarespecificsviauseoflogicaloperatorssuchasREAD/WRITE/GET/PUT.Assemblywas,andstillis,usedfortimecriticalsystemsandofteninembeddedsystemsasitgivesthemostdirectcontrolofwhatthemachinedoes.\nThenextadvancewasthedevelopmentofprocedurallanguages.Thesethird-generationlanguages(thefirstdescribedashigh-levellanguages)usevocabularyrelatedtotheproblembeingsolved.Forexample,\nAlltheselanguagesfollowtheproceduralparadigm.Thatis,theydescribe,stepbystep,exactlytheprocedurethatshould,accordingtotheparticularprogrammeratleast,befollowedtosolveaspecificproblem.Theefficacyandefficiencyofanysuchsolutionareboththereforeentirelysubjectiveandhighlydependentonthatprogrammer\'sexperience,inventiveness,andability.\nFollowingthewidespreaduseofprocedurallanguages,object-orientedprogramming(OOP)languageswerecreated,suchasSimula,Smalltalk,C++,C#,Eiffel,PHP,andJava.Intheselanguages,dataandmethodstomanipulateitarekeptasoneunitcalledanobject.Withperfectencapsulation,oneofthedistinguishingfeaturesofOOP,theonlywaythatanotherobjectoruserwouldbeabletoaccessthedataisviatheobject\'smethods.Thus,theinnerworkingsofanobjectmaybechangedwithoutaffectinganycodethatusestheobject.ThereisstillsomecontroversyraisedbyAlexanderStepanov,RichardStallman[10]andotherprogrammers,concerningtheefficacyoftheOOPparadigmversustheproceduralparadigm.TheneedforeveryobjecttohaveassociativemethodsleadssomeskepticstoassociateOOPwithsoftwarebloat;anattempttoresolvethisdilemmacamethroughpolymorphism.\nBecauseobject-orientedprogrammingisconsideredaparadigm,notalanguage,itispossibletocreateevenanobject-orientedassemblerlanguage.HighLevelAssembly(HLA)isanexampleofthisthatfullysupportsadvanceddatatypesandobject-orientedassemblylanguageprogramming –despiteitsearlyorigins.Thus,differingprogrammingparadigmscanbeseenratherlikemotivationalmemesoftheiradvocates,ratherthannecessarilyrepresentingprogressfromoneleveltothenext[citationneeded].Precisecomparisonsoftheefficacyofcompetingparadigmsarefrequentlymademoredifficultbecauseofnewanddifferingterminologyappliedtosimilarentitiesandprocessestogetherwithnumerousimplementationdistinctionsacrosslanguages.\nLiterateprogramming,asaformofimperativeprogramming,structuresprogramsasahuman-centeredweb,asinahypertextessay:documentationisintegraltotheprogram,andtheprogramisstructuredfollowingthelogicofproseexposition,ratherthancompilerconvenience.\nIndependentoftheimperativebranch,declarativeprogrammingparadigmsweredeveloped.Intheselanguages,thecomputeristoldwhattheproblemis,nothowtosolvetheproblem –theprogramisstructuredasasetofpropertiestofindintheexpectedresult,notasaproceduretofollow.Givenadatabaseorasetofrules,thecomputertriestofindasolutionmatchingallthedesiredproperties.AnarchetypeofadeclarativelanguageisthefourthgenerationlanguageSQL,andthefamilyoffunctionallanguagesandlogicprogramming.\nFunctionalprogrammingisasubsetofdeclarativeprogramming.Programswrittenusingthisparadigmusefunctions,blocksofcodeintendedtobehavelikemathematicalfunctions.Functionallanguagesdiscouragechangesinthevalueofvariablesthroughassignment,makingagreatdealofuseofrecursioninstead.\nThelogicprogrammingparadigmviewscomputationasautomatedreasoningoverabodyofknowledge.Factsabouttheproblemdomainareexpressedaslogicformulas,andprogramsareexecutedbyapplyinginferencerulesoverthemuntilananswertotheproblemisfound,orthesetofformulasisprovedinconsistent.\nSymbolicprogrammingisaparadigmthatdescribesprogramsabletomanipulateformulasandprogramcomponentsasdata.[3]Programscanthuseffectivelymodifythemselves,andappearto"learn",makingthemsuitedforapplicationssuchasartificialintelligence,expertsystems,natural-languageprocessingandcomputergames.LanguagesthatsupportthisparadigmincludeLispandProlog.[11]\nMostprogramminglanguagessupportmorethanoneprogrammingparadigmtoallowprogrammerstousethemostsuitableprogrammingstyleandassociatedlanguageconstructsforagivenjob.[12]\n