Insoftwareengineering,asoftwaredevelopmentprocessistheprocessofdividingsoftwaredevelopmentworkintodistinctphasestoimprovedesign,productmanagement,andprojectmanagement.Itisalsoknownasasoftwaredevelopmentlifecycle.Themethodologymayincludethepre-definitionofspecificdeliverablesandartifactsthatarecreatedandcompletedbyaprojectteamtodevelopormaintainanapplication.[1]\nMostmoderndevelopmentprocessescanbevaguelydescribedasagile.Othermethodologiesincludewaterfall,prototyping,iterativeandincrementaldevelopment,spiraldevelopment,rapidapplicationdevelopment,andextremeprogramming.\nSomepeopleconsideralife-cycle"model"amoregeneraltermforacategoryofmethodologiesandasoftwaredevelopment"process"amorespecifictermtorefertoaspecificprocesschosenbyaspecificorganization.Forexample,therearemanyspecificsoftwaredevelopmentprocessesthatfitthespirallife-cyclemodel.Thefieldisoftenconsideredasubsetofthesystemsdevelopmentlifecycle.\nThesoftwaredevelopmentmethodology(alsoknownasSDM)frameworkdidn\'temergeuntilthe1960s.AccordingtoElliott(2004)thesystemsdevelopmentlifecycle(SDLC)canbeconsideredtobetheoldestformalizedmethodologyframeworkforbuildinginformationsystems.ThemainideaoftheSDLChasbeen"topursuethedevelopmentofinformationsystemsinaverydeliberate,structuredandmethodicalway,requiringeachstageofthelifecycle\xe2\x80\x93\xe2\x80\x93frominceptionoftheideatodeliveryofthefinalsystem\xe2\x80\x93\xe2\x80\x93tobecarriedoutrigidlyandsequentially"[2]withinthecontextoftheframeworkbeingapplied.Themaintargetofthismethodologyframeworkinthe1960swas"todeveloplargescalefunctionalbusinesssystemsinanageoflargescalebusinessconglomerates.Informationsystemsactivitiesrevolvedaroundheavydataprocessingandnumbercrunchingroutines".[2]\nMethodologies,processes,andframeworksrangefromspecificproscriptivestepsthatcanbeuseddirectlybyanorganizationinday-to-daywork,toflexibleframeworksthatanorganizationusestogenerateacustomsetofstepstailoredtotheneedsofaspecificprojectorgroup.Insomecasesa"sponsor"or"maintenance"organizationdistributesanofficialsetofdocumentsthatdescribetheprocess.Specificexamplesinclude:\n2010s\nItisnotablethatsinceDSDMin1994,allofthemethodologiesontheabovelistexceptRUPhavebeenagilemethodologies-yetmanyorganisations,especiallygovernments,stillusepre-agileprocesses(oftenwaterfallorsimilar).Softwareprocessandsoftwarequalityarecloselyinterrelated;someunexpectedfacetsandeffectshavebeenobservedinpractice[3]\nSincetheearly2000sscalingagiledeliveryprocesseshasbecomethebiggestchallengeforteamsusingagileprocesses.[4]\nAmongtheseanothersoftwaredevelopmentprocesshasbeenestablishedinopensource.Theadoptionofthesebestpracticesknownandestablishedprocesseswithintheconfinesofacompanyiscalledinnersource.\nSeveralsoftwaredevelopmentapproacheshavebeenusedsincetheoriginofinformationtechnology,intwomaincategories[citationneeded].Typicallyanapproachoracombinationofapproachesischosenbymanagementoradevelopmentteam[citationneeded].\n"Traditional"methodologiessuchaswaterfallthathavedistinctphasesaresometimesknownassoftwaredevelopmentlifecycle(SDLC)methodologies[citationneeded],thoughthistermcouldalsobeusedmoregenerallytorefertoanymethodology.A"lifecycle"approachwithdistinctphasesisincontrasttoAgileapproacheswhichdefineaprocessofiteration,butwheredesign,construction,anddeploymentofdifferentpiecescanoccursimultaneously[citationneeded].\nContinuousintegrationisthepracticeofmergingalldeveloperworkingcopiestoasharedmainlineseveraltimesaday.[5]GradyBoochfirstnamedandproposedCIinhis1991method,[6]althoughhedidnotadvocateintegratingseveraltimesaday.Extremeprogramming(XP)adoptedtheconceptofCIanddidadvocateintegratingmorethanonceperday\xe2\x80\x93perhapsasmanyastensoftimesperday.\nSoftwareprototypingisaboutcreatingprototypes,i.e.incompleteversionsofthesoftwareprogrambeingdeveloped.\nThebasicprinciplesare:[1]\nAbasicunderstandingofthefundamentalbusinessproblemisnecessarytoavoidsolvingthewrongproblems,butthisistrueforallsoftwaremethodologies.\nVariousmethodsareacceptableforcombininglinearanditerativesystemsdevelopmentmethodologies,withtheprimaryobjectiveofeachbeingtoreduceinherentprojectriskbybreakingaprojectintosmallersegmentsandprovidingmoreease-of-changeduringthedevelopmentprocess.\nTherearethreemainvariantsofincrementaldevelopment:[1]\nRapidapplicationdevelopment(RAD)isasoftwaredevelopmentmethodology,whichfavorsiterativedevelopmentandtherapidconstructionofprototypesinsteadoflargeamountsofup-frontplanning.The"planning"ofsoftwaredevelopedusingRADisinterleavedwithwritingthesoftwareitself.Thelackofextensivepre-planninggenerallyallowssoftwaretobewrittenmuchfaster,andmakesiteasiertochangerequirements.\nTherapiddevelopmentprocessstartswiththedevelopmentofpreliminarydatamodelsandbusinessprocessmodelsusingstructuredtechniques.Inthenextstage,requirementsareverifiedusingprototyping,eventuallytorefinethedataandprocessmodels.Thesestagesarerepeatediteratively;furtherdevelopmentresultsin"acombinedbusinessrequirementsandtechnicaldesignstatementtobeusedforconstructingnewsystems".[7]\nThetermwasfirstusedtodescribeasoftwaredevelopmentprocessintroducedbyJamesMartinin1991.AccordingtoWhitten(2003),itisamergerofvariousstructuredtechniques,especiallydata-driveninformationtechnologyengineering,withprototypingtechniquestoacceleratesoftwaresystemsdevelopment.[7]\nThebasicprinciplesofrapidapplicationdevelopmentare:[1]\n"Agilesoftwaredevelopment"referstoagroupofsoftwaredevelopmentmethodologiesbasedoniterativedevelopment,whererequirementsandsolutionsevolveviacollaborationbetweenself-organizingcross-functionalteams.Thetermwascoinedintheyear2001whentheAgileManifestowasformulated.\nAgilesoftwaredevelopmentusesiterativedevelopmentasabasisbutadvocatesalighterandmorepeople-centricviewpointthantraditionalapproaches.Agileprocessesfundamentallyincorporateiterationandthecontinuousfeedbackthatitprovidestosuccessivelyrefineanddeliverasoftwaresystem.\nTherearemanyagilemethodologies,including:\nThewaterfallmodelisasequentialdevelopmentapproach,inwhichdevelopmentisseenasflowingsteadilydownwards(likeawaterfall)throughseveralphases,typically:\nThefirstformaldescriptionofthemethodisoftencitedasanarticlepublishedbyWinstonW.Royce[8]in1970althoughRoycedidnotusetheterm"waterfall"inthisarticle.Roycepresentedthismodelasanexampleofaflawed,non-workingmodel.[9]\nThebasicprinciplesare:[1]\nThewaterfallmodelisatraditionalengineeringapproachappliedtosoftwareengineering.Astrictwaterfallapproachdiscouragesrevisitingandrevisinganypriorphaseonceitiscomplete.This"inflexibility"inapurewaterfallmodelhasbeenasourceofcriticismbysupportersofothermore"flexible"models.Ithasbeenwidelyblamedforseverallarge-scalegovernmentprojectsrunningoverbudget,overtimeandsometimesfailingtodeliveronrequirementsduetotheBigDesignUpFrontapproach.Exceptwhencontractuallyrequired,thewaterfallmodelhasbeenlargelysupersededbymoreflexibleandversatilemethodologiesdevelopedspecificallyforsoftwaredevelopment.SeeCriticismofWaterfallmodel.\nIn1988,BarryBoehmpublishedaformalsoftwaresystemdevelopment"spiralmodel,"whichcombinessomekeyaspectofthewaterfallmodelandrapidprototypingmethodologies,inanefforttocombineadvantagesoftop-downandbottom-upconcepts.Itprovidedemphasisinakeyareamanyfelthadbeenneglectedbyothermethodologies:deliberateiterativeriskanalysis,particularlysuitedtolarge-scalecomplexsystems.\nThebasicprinciplesare:[1]\nOtherhigh-levelsoftwareprojectmethodologiesinclude:\nSome"processmodels"areabstractdescriptionsforevaluating,comparing,andimprovingthespecificprocessadoptedbyanorganization.\nAvarietyofsuchframeworkshaveevolvedovertheyears,eachwithitsownrecognizedstrengthsandweaknesses.Onesoftwaredevelopmentmethodologyframeworkisnotnecessarilysuitableforusebyallprojects.Eachoftheavailablemethodologyframeworksarebestsuitedtospecifickindsofprojects,basedonvarioustechnical,organizational,projectandteamconsiderations.[1]\nSoftwaredevelopmentorganizationsimplementprocessmethodologiestoeasetheprocessofdevelopment.Sometimes,contractorsmayrequiremethodologiesemployed,anexampleistheU.S.defenseindustry,whichrequiresaratingbasedonprocessmodelstoobtaincontracts.Theinternationalstandardfordescribingthemethodofselecting,implementingandmonitoringthelifecycleforsoftwareisISO/IEC12207.\nAdecades-longgoalhasbeentofindrepeatable,predictableprocessesthatimproveproductivityandquality.Sometrytosystematizeorformalizetheseeminglyunrulytaskofdesigningsoftware.Othersapplyprojectmanagementtechniquestodesigningsoftware.Largenumbersofsoftwareprojectsdonotmeettheirexpectationsintermsoffunctionality,cost,ordeliveryschedule-seeListoffailedandoverbudgetcustomsoftwareprojectsforsomenotableexamples.\nOrganizationsmaycreateaSoftwareEngineeringProcessGroup(SEPG),whichisthefocalpointforprocessimprovement.Composedoflinepractitionerswhohavevariedskills,thegroupisatthecenterofthecollaborativeeffortofeveryoneintheorganizationwhoisinvolvedwithsoftwareengineeringprocessimprovement.\nAparticulardevelopmentteammayalsoagreetoprogrammingenvironmentdetails,suchaswhichintegrateddevelopmentenvironmentisused,andoneormoredominantprogrammingparadigms,programmingstylerules,orchoiceofspecificsoftwarelibrariesorsoftwareframeworks.Thesedetailsaregenerallynotdictatedbythechoiceofmodelorgeneralmethodology.\n