Softwaredesignistheprocessbywhichanagentcreatesaspecificationofasoftwareartifact,intendedtoaccomplishgoals,usingasetofprimitivecomponentsandsubjecttoconstraints.[1]Softwaredesignmayrefertoeither"alltheactivityinvolvedinconceptualizing,framing,implementing,commissioning,andultimatelymodifyingcomplexsystems"or"theactivityfollowingrequirementsspecificationandbeforeprogramming,as...[in]astylizedsoftwareengineeringprocess."[2]\nSoftwaredesignusuallyinvolvesproblemsolvingandplanningasoftwaresolution.Thisincludesbothalow-levelcomponentandalgorithmdesignandahigh-level,architecturedesign.\nSoftwaredesignistheprocessofenvisioninganddefiningsoftwaresolutionstooneormoresetsofproblems.Oneofthemaincomponentsofsoftwaredesignisthesoftwarerequirementsanalysis(SRA).SRAisapartofthesoftwaredevelopmentprocessthatlistsspecificationsusedinsoftwareengineering.Ifthesoftwareis"semi-automated"orusercentered,softwaredesignmayinvolveuserexperiencedesignyieldingastoryboardtohelpdeterminethosespecifications.Ifthesoftwareiscompletelyautomated(meaningnouseroruserinterface),asoftwaredesignmaybeassimpleasaflowchartortextdescribingaplannedsequenceofevents.Therearealsosemi-standardmethodslikeUnifiedModelingLanguageandFundamentalmodelingconcepts.Ineithercase,somedocumentationoftheplanisusuallytheproductofthedesign.Furthermore,asoftwaredesignmaybeplatform-independentorplatform-specific,dependingupontheavailabilityofthetechnologyusedforthedesign.\nThemaindifferencebetweensoftwareanalysisanddesignisthattheoutputofasoftwareanalysisconsistsofsmallerproblemstosolve.Additionally,theanalysisshouldnotbedesignedverydifferentlyacrossdifferentteammembersorgroups.Incontrast,thedesignfocusesoncapabilities,andthusmultipledesignsforthesameproblemcanandwillexist.Dependingontheenvironment,thedesignoftenvaries,whetheritiscreatedfromreliableframeworksorimplementedwithsuitabledesignpatterns.Designexamplesincludeoperationsystems,webpages,mobiledevicesoreventhenewcloudcomputingparadigm.\nSoftwaredesignisbothaprocessandamodel.Thedesignprocessisasequenceofstepsthatenablesthedesignertodescribeallaspectsofthesoftwareforbuilding.Creativeskill,pastexperience,asenseofwhatmakes"good"software,andanoverallcommitmenttoqualityareexamplesofcriticalsuccessfactorsforacompetentdesign.Itisimportanttonote,however,thatthedesignprocessisnotalwaysastraightforwardprocedure;thedesignmodelcanbecomparedtoanarchitect\xe2\x80\x99splansforahouse.Itbeginsbyrepresentingthetotalityofthethingthatistobebuilt(e.g.,athree-dimensionalrenderingofthehouse);slowly,thethingisrefinedtoprovideguidanceforconstructingeachdetail(e.g.,theplumbinglay).Similarly,thedesignmodelthatiscreatedforsoftwareprovidesavarietyofdifferentviewsofthecomputersoftware.Basicdesignprinciplesenablethesoftwareengineertonavigatethedesignprocess.Davis[3]suggestsasetofprinciplesforsoftwaredesign,whichhavebeenadaptedandextendedinthefollowinglist:\nThedesignconceptsprovidethesoftwaredesignerwithafoundationfromwhichmoresophisticatedmethodscanbeapplied.Asetoffundamentaldesignconceptshasevolved.Theyareasfollows:\nInhisobjectmodel,GradyBoochmentionsAbstraction,Encapsulation,Modularisation,andHierarchyasfundamentalsoftwaredesignprinciples.[4]TheacronymPHAME(PrinciplesofHierarchy,Abstraction,Modularisation,andEncapsulation)issometimesusedtorefertothesefourfundamentalprinciples.[5]\nTherearemanyaspectstoconsiderinthedesignofapieceofsoftware.Theimportanceofeachconsiderationshouldreflectthegoalsandexpectationsthatthesoftwareisbeingcreatedtomeet.Someoftheseaspectsare:\nAmodelinglanguageisanyartificiallanguagethatcanbeusedtoexpressinformation,knowledgeorsystemsinastructurethatisdefinedbyaconsistentsetofrules.Theserulesareusedforinterpretationofthecomponentswithinthestructure.Amodelinglanguagecanbegraphicalortextual.Examplesofgraphicalmodelinglanguagesforsoftwaredesignare:\nAsoftwaredesignerorarchitectmayidentifyadesignproblemwhichhasbeenvisitedandperhapsevensolvedbyothersinthepast.Atemplateorpatterndescribingasolutiontoacommonproblemisknownasadesignpattern.Thereuseofsuchpatternscanhelpspeedupthesoftwaredevelopmentprocess.[8]\nThedifficultyofusingtheterm"design"inrelationtosoftwareisthatinsomesenses,thesourcecodeofaprogramisthedesignfortheprogramthatitproduces.Totheextentthatthisistrue,"softwaredesign"referstothedesignofthedesign.EdsgerW.Dijkstrareferredtothislayeringofsemanticlevelsasthe"radicalnovelty"ofcomputerprogramming,[9]andDonaldKnuthusedhisexperiencewritingTeXtodescribethefutilityofattemptingtodesignaprogrampriortoimplementingit:\nTEXwouldhavebeenacompletefailureifIhadmerelyspecifieditandnotparticipatedfullyinitsinitialimplementation.Theprocessofimplementationconstantlyledmetounanticipatedquestionsandtonewinsightsabouthowtheoriginalspecificationscouldbeimproved.[10]\nSoftwaredesigndocumentationmaybereviewedorpresentedtoallowconstraints,specificationsandevenrequirementstobeadjustedpriortocomputerprogramming.Redesignmayoccurafterreviewofaprogrammedsimulationorprototype.Itispossibletodesignsoftwareintheprocessofprogramming,withoutaplanorrequirementanalysis,[11]butformorecomplexprojectsthiswouldnotbeconsideredfeasible.AseparatedesignpriortoprogrammingallowsformultidisciplinarydesignersandSubjectMatterExperts(SMEs)tocollaboratewithhighlyskilledprogrammersforsoftwarethatisbothusefulandtechnicallysound.\n^RogerS.Pressman.Softwareengineering:apractitioner\xe2\x80\x99sapproach.McGraw-Hill.ISBNÂ 0-07-365578-3.\n