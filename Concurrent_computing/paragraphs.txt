Concurrentcomputingisaformofcomputinginwhichseveralcomputationsareexecutedduringoverlappingtimeperiods\xe2\x80\x94concurrently\xe2\x80\x94insteadofsequentially(onecompletingbeforethenextstarts).Thisisapropertyofasystem\xe2\x80\x94thismaybeanindividualprogram,acomputer,oranetwork\xe2\x80\x94andthereisaseparateexecutionpointor"threadofcontrol"foreachcomputation("process").Aconcurrentsystemisonewhereacomputationcanadvancewithoutwaitingforallothercomputationstocomplete.[1]\nAsaprogrammingparadigm,concurrentcomputingisaformofmodularprogramming,namelyfactoringanoverallcomputationintosubcomputationsthatmaybeexecutedconcurrently.PioneersinthefieldofconcurrentcomputingincludeEdsgerDijkstra,PerBrinchHansen,andC.A.R.Hoare.\nTheconceptofconcurrentcomputingisfrequentlyconfusedwiththerelatedbutdistinctconceptofparallelcomputing,[2][3]althoughbothcanbedescribedas"multipleprocessesexecutingduringthesameperiodoftime".Inparallelcomputing,executionoccursatthesamephysicalinstant:forexample,onseparateprocessorsofamulti-processormachine,withthegoalofspeedingupcomputations\xe2\x80\x94parallelcomputingisimpossibleona(one-core)singleprocessor,asonlyonecomputationcanoccuratanyinstant(duringanysingleclockcycle).[a]Bycontrast,concurrentcomputingconsistsofprocesslifetimesoverlapping,butexecutionneednothappenatthesameinstant.Thegoalhereistomodelprocessesintheoutsideworldthathappenconcurrently,suchasmultipleclientsaccessingaserveratthesametime.Structuringsoftwaresystemsascomposedofmultipleconcurrent,communicatingpartscanbeusefulfortacklingcomplexity,regardlessofwhetherthepartscanbeexecutedinparallel.[4]:1\nForexample,concurrentprocessescanbeexecutedononecorebyinterleavingtheexecutionstepsofeachprocessviatime-sharingslices:onlyoneprocessrunsatatime,andifitdoesnotcompleteduringitstimeslice,itispaused,anotherprocessbeginsorresumes,andthenlatertheoriginalprocessisresumed.Inthisway,multipleprocessesarepart-waythroughexecutionatasingleinstant,butonlyoneprocessisbeingexecutedatthatinstant.[citationneeded]\nConcurrentcomputationsmaybeexecutedinparallel,[2][5]forexample,byassigningeachprocesstoaseparateprocessororprocessorcore,ordistributingacomputationacrossanetwork.Ingeneral,however,thelanguages,tools,andtechniquesforparallelprogrammingmightnotbesuitableforconcurrentprogramming,andviceversa.[citationneeded]\nTheexacttimingofwhentasksinaconcurrentsystemareexecuteddependonthescheduling,andtasksneednotalwaysbeexecutedconcurrently.Forexample,giventwotasks,T1andT2:[citationneeded]\nTheword"sequential"isusedasanantonymforboth"concurrent"and"parallel";whentheseareexplicitlydistinguished,concurrent/sequentialandparallel/serialareusedasopposingpairs.[6]Ascheduleinwhichtasksexecuteoneatatime(serially,noparallelism),withoutinterleaving(sequentially,noconcurrency:notaskbeginsuntilthepriortaskends)iscalledaserialschedule.Asetoftasksthatcanbescheduledseriallyisserializable,whichsimplifiesconcurrencycontrol.[citationneeded]\nThemainchallengeindesigningconcurrentprogramsisconcurrencycontrol:ensuringthecorrectsequencingoftheinteractionsorcommunicationsbetweendifferentcomputationalexecutions,andcoordinatingaccesstoresourcesthataresharedamongexecutions.[5]Potentialproblemsincluderaceconditions,deadlocks,andresourcestarvation.Forexample,considerthefollowingalgorithmtomakewithdrawalsfromacheckingaccountrepresentedbythesharedresourcebalance:\nSupposebalance=500,andtwoconcurrentthreadsmakethecallswithdraw(300)andwithdraw(350).Ifline3inbothoperationsexecutesbeforeline5bothoperationswillfindthatbalance>=withdrawalevaluatestotrue,andexecutionwillproceedtosubtractingthewithdrawalamount.However,sincebothprocessesperformtheirwithdrawals,thetotalamountwithdrawnwillendupbeingmorethantheoriginalbalance.Thesesortsofproblemswithsharedresourcesbenefitfromtheuseofconcurrencycontrol,ornon-blockingalgorithms.\nConcurrentcomputinghasthefollowingadvantages:\nThereareseveralmodelsofconcurrentcomputing,whichcanbeusedtounderstandandanalyzeconcurrentsystems.Thesemodelsinclude:\nAnumberofdifferentmethodscanbeusedtoimplementconcurrentprograms,suchasimplementingeachcomputationalexecutionasanoperatingsystemprocess,orimplementingthecomputationalprocessesasasetofthreadswithinasingleoperatingsystemprocess.\nInsomeconcurrentcomputingsystems,communicationbetweentheconcurrentcomponentsishiddenfromtheprogrammer(e.g.,byusingfutures),whileinothersitmustbehandledexplicitly.Explicitcommunicationcanbedividedintotwoclasses:\nSharedmemoryandmessagepassingconcurrencyhavedifferentperformancecharacteristics.Typically(althoughnotalways),theper-processmemoryoverheadandtaskswitchingoverheadislowerinamessagepassingsystem,buttheoverheadofmessagepassingisgreaterthanforaprocedurecall.Thesedifferencesareoftenoverwhelmedbyotherperformancefactors.\nConcurrentcomputingdevelopedoutofearlierworkonrailroadsandtelegraphy,fromthe19thandearly20thcentury,andsometermsdatetothisperiod,suchassemaphores.Thesearosetoaddressthequestionofhowtohandlemultipletrainsonthesamerailroadsystem(avoidingcollisionsandmaximizingefficiency)andhowtohandlemultipletransmissionsoveragivensetofwires(improvingefficiency),suchasviatime-divisionmultiplexing(1870s).\nTheacademicstudyofconcurrentalgorithmsstartedinthe1960s,withDijkstra(1965)creditedwithbeingthefirstpaperinthisfield,identifyingandsolvingmutualexclusion.[7]\nConcurrencyispervasiveincomputing,occurringfromlow-levelhardwareonasinglechiptoworldwidenetworks.Examplesfollow.\nAttheprogramminglanguagelevel:\nAttheoperatingsystemlevel:\nAtthenetworklevel,networkedsystemsaregenerallyconcurrentbytheirnature,astheyconsistofseparatedevices.\nConcurrentprogramminglanguagesareprogramminglanguagesthatuselanguageconstructsforconcurrency.Theseconstructsmayinvolvemulti-threading,supportfordistributedcomputing,messagepassing,sharedresources(includingsharedmemory)orfuturesandpromises.Suchlanguagesaresometimesdescribedasconcurrency-orientedlanguagesorconcurrency-orientedprogramminglanguages(COPL).[8]\nToday,themostcommonlyusedprogramminglanguagesthathavespecificconstructsforconcurrencyareJavaandC#.Bothoftheselanguagesfundamentallyuseashared-memoryconcurrencymodel,withlockingprovidedbymonitors(althoughmessage-passingmodelscanandhavebeenimplementedontopoftheunderlyingshared-memorymodel).Ofthelanguagesthatuseamessage-passingconcurrencymodel,Erlangisprobablythemostwidelyusedinindustryatpresent.[citationneeded]\nManyconcurrentprogramminglanguageshavebeendevelopedmoreasresearchlanguages(e.g.Pict)ratherthanaslanguagesforproductionuse.However,languagessuchasErlang,Limbo,andoccamhaveseenindustrialuseatvarioustimesinthelast20years.Languagesinwhichconcurrencyplaysanimportantroleinclude:\nManyotherlanguagesprovidesupportforconcurrencyintheformoflibraries,atlevelsroughlycomparablewiththeabovelist.\n