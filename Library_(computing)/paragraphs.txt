Incomputerscience,alibraryisacollectionofnon-volatileresourcesusedbycomputerprograms,oftenforsoftwaredevelopment.Thesemayincludeconfigurationdata,documentation,helpdata,messagetemplates,pre-writtencodeandsubroutines,classes,valuesortypespecifications.InIBM\'sOS/360anditssuccessorstheyarereferredtoaspartitioneddatasets.\nAlibraryisalsoacollectionofimplementationsofbehavior,writtenintermsofalanguage,thathasawell-definedinterfacebywhichthebehaviorisinvoked.Forinstance,peoplewhowanttowriteahigherlevelprogramcanusealibrarytomakesystemcallsinsteadofimplementingthosesystemcallsoverandoveragain.Inaddition,thebehaviorisprovidedforreusebymultipleindependentprograms.Aprograminvokesthelibrary-providedbehaviorviaamechanismofthelanguage.Forexample,inasimpleimperativelanguagesuchasC,thebehaviorinalibraryisinvokedbyusingC\'snormalfunction-call.Whatdistinguishesthecallasbeingtoalibraryfunction,versusbeingtoanotherfunctioninthesameprogram,isthewaythatthecodeisorganizedinthesystem.\nLibrarycodeisorganizedinsuchawaythatitcanbeusedbymultipleprogramsthathavenoconnectiontoeachother,whilecodethatispartofaprogramisorganizedtobeusedonlywithinthatoneprogram.Thisdistinctioncangainahierarchicalnotionwhenaprogramgrowslarge,suchasamulti-million-lineprogram.Inthatcase,theremaybeinternallibrariesthatarereusedbyindependentsub-portionsofthelargeprogram.Thedistinguishingfeatureisthatalibraryisorganizedforthepurposesofbeingreusedbyindependentprogramsorsub-programs,andtheuseronlyneedstoknowtheinterface,andnottheinternaldetailsofthelibrary.\nThevalueofalibraryliesinthereuseofthebehavior.Whenaprograminvokesalibrary,itgainsthebehaviorimplementedinsidethatlibrarywithouthavingtoimplementthatbehavioritself.Librariesencouragethesharingofcodeinamodularfashion,andeasethedistributionofthecode.\nThebehaviorimplementedbyalibrarycanbeconnectedtotheinvokingprogramatdifferentprogramlifecyclephases.Ifthecodeofthelibraryisaccessedduringthebuildoftheinvokingprogram,thenthelibraryiscalledastaticlibrary.[1]Analternativeistobuildtheexecutableoftheinvokingprogramanddistributethat,independentlyofthelibraryimplementation.Thelibrarybehaviorisconnectedaftertheexecutablehasbeeninvokedtobeexecuted,eitheraspartoftheprocessofstartingtheexecution,orinthemiddleofexecution.Inthiscasethelibraryiscalledadynamiclibrary(loadedatruntime).Adynamiclibrarycanbeloadedandlinkedwhenpreparingaprogramforexecution,bythelinker.Alternatively,inthemiddleofexecution,anapplicationmayexplicitlyrequestthatamodulebeloaded.\nMostcompiledlanguageshaveastandardlibraryalthoughprogrammerscanalsocreatetheirowncustomlibraries.Mostmodernsoftwaresystemsprovidelibrariesthatimplementthemajorityofthesystemservices.Suchlibrarieshavecommoditizedtheserviceswhichamodernapplicationrequires.Assuch,mostcodeusedbymodernapplicationsisprovidedinthesesystemlibraries.\nTheearliestprogrammingconceptsanalogoustolibrarieswereintendedtoseparatedatadefinitionsfromtheprogramimplementation.JOVIALbroughtthe"COMPOOL"(CommunicationPool)concepttopopularattentionin1959,althoughitadoptedtheideafromthelarge-systemSAGEsoftware.Followingthecomputerscienceprinciplesofseparationofconcernsandinformationhiding,"CommPool\'spurposewastopermitthesharingofSystemDataamongmanyprogramsbyprovidingacentralizeddatadescription."[2]\nCOBOLalsoincluded"primitivecapabilitiesforalibrarysystem"in1959,[3]butJeanSammetdescribedthemas"inadequatelibraryfacilities"inretrospect.[4]\nAnothermajorcontributortothemodernlibraryconceptcameintheformofthesubprograminnovationofFORTRAN.FORTRANsubprogramscanbecompiledindependentlyofeachother,butthecompilerlackedalinker.SopriortotheintroductionofmodulesinFortran-90,typecheckingbetweenFORTRAN[NB1]subprogramswasimpossible.[5]\nFinally,historiansoftheconceptshouldremembertheinfluentialSimula67.Simulawasthefirstobject-orientedprogramminglanguage,anditsclasseswerenearlyidenticaltothemodernconceptasusedinJava,C++,andC#.TheclassconceptofSimulawasalsoaprogenitorofthepackageinAdaandthemoduleofModula-2.[6]Evenwhendevelopedoriginallyin1965,Simulaclassescouldbeincludedinlibraryfilesandaddedatcompiletime.[7]\nLibrariesareimportantintheprogramlinkingorbindingprocess,whichresolvesreferencesknownaslinksorsymbolstolibrarymodules.Thelinkingprocessisusuallyautomaticallydonebyalinkerorbinderprogramthatsearchesasetoflibrariesandothermodulesinagivenorder.Usuallyitisnotconsideredanerrorifalinktargetcanbefoundmultipletimesinagivensetoflibraries.Linkingmaybedonewhenanexecutablefileiscreated,orwhenevertheprogramisusedatruntime.\nThereferencesbeingresolvedmaybeaddressesforjumpsandotherroutinecalls.Theymaybeinthemainprogram,orinonemoduledependinguponanother.Theyareresolvedintofixedorrelocatableaddresses(fromacommonbase)byallocatingruntimememoryforthememorysegmentsofeachmodulereferenced.\nSomeprogramminglanguagesmayuseafeaturecalledsmartlinkingwherebythelinkerisawareoforintegratedwiththecompiler,suchthatthelinkerknowshowexternalreferencesareused,andcodeinalibrarythatisneveractuallyused,eventhoughinternallyreferenced,canbediscardedfromthecompiledapplication.Forexample,aprogramthatonlyusesintegersforarithmetic,ordoesnoarithmeticoperationsatall,canexcludefloating-pointlibraryroutines.Thissmart-linkingfeaturecanleadtosmallerapplicationfilesizesandreducedmemoryusage.\nSomereferencesinaprogramorlibrarymodulearestoredinarelativeorsymbolicformwhichcannotberesolveduntilallcodeandlibrariesareassignedfinalstaticaddresses.Relocationistheprocessofadjustingthesereferences,andisdoneeitherbythelinkerortheloader.Ingeneral,relocationcannotbedonetoindividuallibrariesthemselvesbecausetheaddressesinmemorymayvarydependingontheprogramusingthemandotherlibrariestheyarecombinedwith.Position-independentcodeavoidsreferencestoabsoluteaddressesandthereforedoesnotrequirerelocation.\nWhenlinkingisperformedduringthecreationofanexecutableoranotherobjectfile,itisknownasstaticlinkingorearlybinding.Inthiscase,thelinkingisusuallydonebyalinker,butmayalsobedonebythecompiler.Astaticlibrary,alsoknownasanarchive,isoneintendedtobestaticallylinked.Originally,onlystaticlibrariesexisted.Staticlinkingmustbeperformedwhenanymodulesarerecompiled.\nAllofthemodulesrequiredbyaprogramaresometimesstaticallylinkedandcopiedintotheexecutablefile.Thisprocess,andtheresultingstand-alonefile,isknownasastaticbuildoftheprogram.Astaticbuildmaynotneedanyfurtherrelocationifvirtualmemoryisusedandnoaddressspacelayoutrandomizationisdesired.[8]\nAsharedlibraryorsharedobjectisafilethatisintendedtobesharedbyexecutablefilesandfurthersharedobjectfiles.Modulesusedbyaprogramareloadedfromindividualsharedobjectsintomemoryatloadtimeorruntime,ratherthanbeingcopiedbyalinkerwhenitcreatesasinglemonolithicexecutablefilefortheprogram.\nSharedlibrariescanbestaticallylinked,meaningthatreferencestothelibrarymodulesareresolvedandthemodulesareallocatedmemorywhentheexecutablefileiscreated.Butoftenlinkingofsharedlibrariesispostponeduntiltheyareloaded.[dubiousâ€“discuss]\nMostmodernoperatingsystems[NB2]canhavesharedlibraryfilesofthesameformatastheexecutablefiles.Thisofferstwomainadvantages:first,itrequiresmakingonlyoneloaderforbothofthem,ratherthantwo(havingthesingleloaderisconsideredwellworthitsaddedcomplexity).Secondly,itallowstheexecutablesalsotobeusedassharedlibraries,iftheyhaveasymboltable.TypicalcombinedexecutableandsharedlibraryformatsareELFandMach-O(bothinUnix)andPE(Windows).\nInsomeolderenvironmentssuchas16-bitWindowsorMPEfortheHP3000onlystack-baseddata(local)wasallowedinshared-librarycode,orothersignificantrestrictionswereplacedonshared-librarycode.\nLibrarycodemaybesharedinmemorybymultipleprocesses,aswellasondisk.Ifvirtualmemoryisused,processeswouldexecutethesamephysicalpageofRAMthatismappedintothedifferentaddressspacesoftheprocesses.Thishasadvantages.Forinstance,ontheOpenStepsystem,applicationswereoftenonlyafewhundredkilobytesinsizeandloadedquickly;themajorityoftheircodewaslocatedinlibrariesthathadalreadybeenloadedforotherpurposesbytheoperatingsystem.[citationneeded]\nProgramscanaccomplishRAMsharingbyusingposition-independentcode,asinUnix,whichleadstoacomplexbutflexiblearchitecture,orbyusingcommonvirtualaddresses,asinWindowsandOS/2.Thesesystemsmakesure,byvarioustrickslikepre-mappingtheaddressspaceandreservingslotsforeachsharedlibrary,thatcodehasagreatprobabilityofbeingshared.Athirdalternativeissingle-levelstore,asusedbytheIBMSystem/38anditssuccessors.Thisallowsposition-dependentcode,butplacesnosignificantrestrictionsonwherecodecanbeplacedorhowitcanbeshared.\nInsomecasesdifferentversionsofsharedlibrariescancauseproblems,especiallywhenlibrariesofdifferentversionshavethesamefilename,anddifferentapplicationsinstalledonasystemeachrequireaspecificversion.SuchascenarioisknownasDLLhell,namedaftertheWindowsandOS/2DLLfile.Mostmodernoperatingsystemsafter2001haveclean-upmethodstoeliminatesuchsituationsoruseapplication-specific"private"libraries.[9]\nDynamiclinkingorlatebindingislinkingperformedwhileaprogramisbeingloaded(loadtime)orexecuted(runtime),ratherthanwhentheexecutablefileiscreated.Adynamicallylinkedlibrary(dynamic-linklibrary,orDLL,underWindowsandOS/2;dynamicsharedobject,orDSO,underUnix-likesystems)isalibraryintendedfordynamiclinking.Onlyaminimalamountofworkisdonebythelinkerwhentheexecutablefileiscreated;itonlyrecordswhatlibraryroutinestheprogramneedsandtheindexnamesornumbersoftheroutinesinthelibrary.Themajorityoftheworkoflinkingisdoneatthetimetheapplicationisloaded(loadtime)orduringexecution(runtime).Usually,thenecessarylinkingprogram,calleda"dynamiclinker"or"linkingloader",isactuallypartoftheunderlyingoperatingsystem.(However,itispossible,andnotexceedinglydifficult,towriteaprogramthatusesdynamiclinkingandincludesitsowndynamiclinker,evenforanoperatingsystemthatitselfprovidesnosupportfordynamiclinking.)\nProgrammersoriginallydevelopeddynamiclinkingintheMulticsoperatingsystem,startingin1964,andtheMTS(MichiganTerminalSystem),builtinthelate1960s.[10]\nSincesharedlibrariesonmostsystemsdonotchangeoften,systemscancomputealikelyloadaddressforeachsharedlibraryonthesystembeforeitisneededandstorethatinformationinthelibrariesandexecutables.Ifeverysharedlibrarythatisloadedhasundergonethisprocess,theneachwillloadatitspredeterminedaddress,whichspeedsuptheprocessofdynamiclinking.ThisoptimizationisknownasprebindinginmacOSandprelinkinginLinux.Disadvantagesofthistechniqueincludethetimerequiredtoprecomputetheseaddresseseverytimethesharedlibrarieschange,theinabilitytouseaddressspacelayoutrandomization,andtherequirementofsufficientvirtualaddressspaceforuse(aproblemthatwillbealleviatedbytheadoptionof64-bitarchitectures,atleastforthetimebeing).\nLoadersforsharedlibrariesvarywidelyinfunctionality.Somedependontheexecutablestoringexplicitpathstothelibraries.Anychangetothelibrarynamingorlayoutofthefilesystemwillcausethesesystemstofail.Morecommonly,onlythenameofthelibrary(andnotthepath)isstoredintheexecutable,withtheoperatingsystemsupplyingamethodtofindthelibraryondisk,basedonsomealgorithm.\nIfasharedlibrarythatanexecutabledependsonisdeleted,moved,orrenamed,orifanincompatibleversionofthelibraryiscopiedtoaplacethatisearlierinthesearch,theexecutablewouldfailtoload.Thisiscalleddependencyhell,existingonmanyplatforms.The(infamous)WindowsvariantiscommonlyknownasDLLhell.Thisproblemcannotoccurifeachversionofeachlibraryisuniquelyidentifiedandeachprogramreferenceslibrariesonlybytheirfulluniqueidentifiers.The"DLLhell"problemswithearlierWindowsversionsarosefromusingonlythenamesoflibraries,whichwerenotguaranteedtobeunique,toresolvedynamiclinksinprograms.(Toavoid"DLLhell",laterversionsofWindowsrelylargelyonoptionsforprogramstoinstallprivateDLLsâ€”essentiallyapartialretreatfromtheuseofsharedlibrariesâ€”alongwithmechanismstopreventreplacementofsharedsystemDLLswithearlierversionsofthem.)\nMicrosoftWindowscheckstheregistrytodeterminetheproperplacetoloadDLLsthatimplementCOMobjects,butforotherDLLsitwillcheckthedirectoriesinadefinedorder.First,Windowschecksthedirectorywhereitloadedtheprogram(privateDLL[9]);anydirectoriessetbycallingtheSetDllDirectory()function;theSystem32,System,andWindowsdirectories;thenthecurrentworkingdirectory;andfinallythedirectoriesspecifiedbythePATHenvironmentvariable.[11]Applicationswrittenforthe.NETFrameworkframework(since2002),alsochecktheGlobalAssemblyCacheastheprimarystoreofshareddllfilestoremovetheissueofDLLhell.\nOpenStepusedamoreflexiblesystem,collectingalistoflibrariesfromanumberofknownlocations(similartothePATHconcept)whenthesystemfirststarts.Movinglibrariesaroundcausesnoproblemsatall,althoughusersincuratimecostwhenfirststartingthesystem.\nMostUnix-likesystemshavea"searchpath"specifyingfile-systemdirectoriesinwhichtolookfordynamiclibraries.Somesystemsspecifythedefaultpathinaconfigurationfile,othershard-codeitintothedynamicloader.Someexecutablefileformatscanspecifyadditionaldirectoriesinwhichtosearchforlibrariesforaparticularprogram.Thiscanusuallybeoverriddenwithanenvironmentvariable,althoughitisdisabledforsetuidandsetgidprograms,sothatausercan\'tforcesuchaprogramtorunarbitrarycodewithrootpermissions.Developersoflibrariesareencouragedtoplacetheirdynamiclibrariesinplacesinthedefaultsearchpath.Onthedownside,thiscanmakeinstallationofnewlibrariesproblematic,andthese"known"locationsquicklybecomehometoanincreasingnumberoflibraryfiles,makingmanagementmorecomplex.\nDynamicloading,asubsetofdynamiclinking,involvesadynamicallylinkedlibraryloadingandunloadingatruntimeonrequest.Sucharequestmaybemadeimplicitlyatcompiletimeorexplicitlyatruntime.Implicitrequestsaremadeatcompiletimewhenalinkeraddslibraryreferencesthatincludefilepathsorsimplyfilenames.Explicitrequestsaremadewhenapplicationsmakedirectcallstoanoperatingsystem\'sAPIatruntime.\nMostoperatingsystemsthatsupportdynamicallylinkedlibrariesalsosupportdynamicallyloadingsuchlibrariesviaarun-timelinkerAPI.Forinstance,MicrosoftWindowsusestheAPIfunctionsLoadLibrary,LoadLibraryEx,FreeLibraryandGetProcAddresswithMicrosoftDynamicLinkLibraries;POSIX-basedsystems,includingmostUNIXandUNIX-likesystems,usedlopen,dlcloseanddlsym.Somedevelopmentsystemsautomatethisprocess.\nAlthoughoriginallypioneeredinthe1960s,dynamiclinkingdidnotreachoperatingsystemsusedbyconsumersuntilthelate1980s.Itwasgenerallyavailableinsomeforminmostoperatingsystemsbytheearly1990s.Duringthissameperiod,object-orientedprogramming(OOP)wasbecomingasignificantpartoftheprogramminglandscape.OOPwithruntimebindingrequiresadditionalinformationthattraditionallibrariesdon\'tsupply.Inadditiontothenamesandentrypointsofthecodelocatedwithin,theyalsorequirealistoftheobjectstheydependon.Thisisaside-effectofoneofOOP\'smainadvantages,inheritance,whichmeansthatpartsofthecompletedefinitionofanymethodmaybeindifferentplaces.Thisismorethansimplylistingthatonelibraryrequirestheservicesofanother:inatrueOOPsystem,thelibrariesthemselvesmaynotbeknownatcompiletime,andvaryfromsystemtosystem.\nAtthesametimemanydevelopersworkedontheideaofmulti-tierprograms,inwhicha"display"runningonadesktopcomputerwouldusetheservicesofamainframeorminicomputerfordatastorageorprocessing.Forinstance,aprogramonaGUI-basedcomputerwouldsendmessagestoaminicomputertoreturnsmallsamplesofahugedatasetfordisplay.Remoteprocedurecalls(RPC)alreadyhandledthesetasks,buttherewasnostandardRPCsystem.\nSoonthemajorityoftheminicomputerandmainframevendorsinstigatedprojectstocombinethetwo,producinganOOPlibraryformatthatcouldbeusedanywhere.Suchsystemswereknownasobjectlibraries,ordistributedobjects,iftheysupportedremoteaccess(notalldid).Microsoft\'sCOMisanexampleofsuchasystemforlocaluse,DCOMamodifiedversionthatsupportsremoteaccess.\nForsometimeobjectlibrariesheldthestatusofthe"nextbigthing"intheprogrammingworld.Therewereanumberofeffortstocreatesystemsthatwouldrunacrossplatforms,andcompaniescompetedtotrytogetdeveloperslockedintotheirownsystem.ExamplesincludeIBM\'sSystemObjectModel(SOM/DSOM),SunMicrosystems\'DistributedObjectsEverywhere(DOE),NeXT\'sPortableDistributedObjects(PDO),Digital\'sObjectBroker,Microsoft\'sComponentObjectModel(COM/DCOM),andanynumberofCORBA-basedsystems.\nAftertheinevitablecoolingofmarketinghype,objectlibrariescontinuetobeusedinbothobject-orientedprogramminganddistributedinformationsystems.ClasslibrariesaretheroughOOPequivalentofoldertypesofcodelibraries.Theycontainclasses,whichdescribecharacteristicsanddefineactions(methods)thatinvolveobjects.Classlibrariesareusedtocreateinstances,orobjectswiththeircharacteristicssettospecificvalues.InsomeOOPlanguages,likeJava,thedistinctionisclear,withtheclassesoftencontainedinlibraryfiles(likeJava\'sJARfileformat)andtheinstantiatedobjectsresidingonlyinmemory(althoughpotentiallyabletobemadepersistentinseparatefiles).Inothers,likeSmalltalk,theclasslibrariesaremerelythestartingpointforasystemimagethatincludestheentirestateoftheenvironment,classesandallinstantiatedobjects.\nAnothersolutiontothelibraryissuecomesfromusingcompletelyseparateexecutables(ofteninsomelightweightform)andcallingthemusingaremoteprocedurecall(RPC)overanetworktoanothercomputer.Thisapproachmaximizesoperatingsystemre-use:thecodeneededtosupportthelibraryisthesamecodebeingusedtoprovideapplicationsupportandsecurityforeveryotherprogram.Additionally,suchsystemsdonotrequirethelibrarytoexistonthesamemachine,butcanforwardtherequestsoverthenetwork.\nHowever,suchanapproachmeansthateverylibrarycallrequiresaconsiderableamountofoverhead.RPCcallsaremuchmoreexpensivethancallingasharedlibrarythathasalreadybeenloadedonthesamemachine.Thisapproachiscommonlyusedinadistributedarchitecturethatmakesheavyuseofsuchremotecalls,notablyclient-serversystemsandapplicationserverssuchasEnterpriseJavaBeans.\nCodegenerationlibrariesarehigh-levelAPIsthatcangenerateortransformbytecodeforJava.Theyareusedbyaspect-orientedprogramming,somedataaccessframeworks,andfortestingtogeneratedynamicproxyobjects.Theyalsoareusedtointerceptfieldaccess.[12]\nThesystemstoreslibfoo.aandlibfoo.sofilesindirectoriessuchas/lib,/usr/libor/usr/local/lib.Thefilenamesalwaysstartwithlib,andendwithasuffixof.a(archive,staticlibrary)orof.so(sharedobject,dynamicallylinkedlibrary).Somesystemsmighthavemultiplenamesforthedynamicallylinkedlibrary,withmostofthenamesbeingnamesforsymboliclinkstotheremainingname;thosenamesmightincludethemajorversionofthelibrary,orthefullversionnumber;forexample,onsomesystemslibfoo.so.2wouldbethefilenameforthesecondmajorinterfacerevisionofthedynamicallylinkedlibrarylibfoo.The.lafilessometimesfoundinthelibrarydirectoriesarelibtoolarchives,notusablebythesystemassuch.\nThesysteminheritsstaticlibraryconventionsfromBSD,withthelibrarystoredina.afile,andcanuse.so-styledynamicallylinkedlibraries(withthe.dylibsuffixinstead).MostlibrariesinmacOS,however,consistof"frameworks",placedinsidespecialdirectoriescalled"bundles"whichwrapthelibrary\'srequiredfilesandmetadata.Forexample,aframeworkcalledMyFrameworkwouldbeimplementedinabundlecalledMyFramework.framework,withMyFramework.framework/MyFrameworkbeingeitherthedynamicallylinkedlibraryfileorbeingasymlinktothedynamicallylinkedlibraryfileinMyFramework.framework/Versions/Current/MyFramework.\nDynamic-linklibrariesusuallyhavethesuffix*.DLL,[13]althoughotherfilenameextensionsmayidentifyspecific-purposedynamicallylinkedlibraries,e.g.*.OCXforOLElibraries.Theinterfacerevisionsareeitherencodedinthefilenames,orabstractedawayusingCOM-objectinterfaces.Dependingonhowtheyarecompiled,*.LIBfilescanbeeitherstaticlibrariesorrepresentationsofdynamicallylinkablelibrariesneededonlyduringcompilation,knownas"importlibraries".UnlikeintheUNIXworld,whichusesdifferentfileextensions,whenlinkingagainst.LIBfileinWindowsonemustfirstknowifitisaregularstaticlibraryoranimportlibrary.Inthelattercase,a.DLLfilemustbepresentatruntime.\n\n