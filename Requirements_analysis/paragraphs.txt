Insystemsengineeringandsoftwareengineering,requirementsanalysisencompassesthosetasksthatgointodeterminingtheneedsorconditionstomeetforaneworalteredproductorproject,takingaccountofthepossiblyconflictingrequirementsofthevariousstakeholders,analyzing,documenting,validatingandmanagingsoftwareorsystemrequirements.[2]\nRequirementsanalysisiscriticaltothesuccessorfailureofasystemsorsoftwareproject.[3]Therequirementsshouldbedocumented,actionable,measurable,testable,traceable,relatedtoidentifiedbusinessneedsoropportunities,anddefinedtoalevelofdetailsufficientforsystemdesign.\nConceptually,requirementsanalysisincludesthreetypesofactivities:[citationneeded]\nRequirementsanalysiscanbealongandtiringprocessduringwhichmanydelicatepsychologicalskillsareinvolved.Largesystemsmayconfrontanalystswithhundredsorthousandsofsystemrequirements.[4]Newsystemschangetheenvironmentandrelationshipsbetweenpeople,soitisimportanttoidentifyallthestakeholders,takeintoaccountalltheirneedsandensuretheyunderstandtheimplicationsofthenewsystems.Analystscanemployseveraltechniquestoelicittherequirementsfromthecustomer.Thesemayincludethedevelopmentofscenarios(representedasuserstoriesinagilemethods),theidentificationofusecases,theuseofworkplaceobservationorethnography,holdinginterviews,orfocusgroups(moreaptlynamedinthiscontextasrequirementsworkshops,orrequirementsreviewsessions)andcreatingrequirementslists.Prototypingmaybeusedtodevelopanexamplesystemthatcanbedemonstratedtostakeholders.Wherenecessary,theanalystwillemployacombinationofthesemethodstoestablishtheexactrequirementsofthestakeholders,sothatasystemthatmeetsthebusinessneedsisproduced.[citationneeded]Requirementsqualitycanbeimprovedthroughtheseandothermethods\nSeeStakeholderanalysisforadiscussionofpeopleororganizations(legalentitiessuchascompanies,standardsbodies)thathaveavalidinterestinthesystem.Theymaybeaffectedbyiteitherdirectlyorindirectly.\nAmajornewemphasisinthe1990swasafocusontheidentificationofstakeholders.Itisincreasinglyrecognizedthatstakeholdersarenotlimitedtotheorganizationemployingtheanalyst.Otherstakeholderswillinclude:\nRequirementsoftenhavecross-functionalimplicationsthatareunknowntoindividualstakeholdersandoftenmissedorincompletelydefinedduringstakeholderinterviews.Thesecross-functionalimplicationscanbeelicitedbyconductingJRDsessionsinacontrolledenvironment,facilitatedbyatrainedfacilitator(BusinessAnalyst),whereinstakeholdersparticipateindiscussionstoelicitrequirements,analyzetheirdetailsanduncovercross-functionalimplications.Adedicatedscribeshouldbepresenttodocumentthediscussion,freeinguptheBusinessAnalysttoleadthediscussioninadirectionthatgeneratesappropriaterequirementswhichmeetthesessionobjective.\nJRDSessionsareanalogoustoJointApplicationDesignSessions.Intheformer,thesessionselicitrequirementsthatguidedesign,whereasthelatterelicitthespecificdesignfeaturestobeimplementedinsatisfactionofelicitedrequirements.\nOnetraditionalwayofdocumentingrequirementshasbeencontractstylerequirementlists.Inacomplexsystemsuchrequirementslistscanruntohundredsofpageslong.\nAnappropriatemetaphorwouldbeanextremelylongshoppinglist.Suchlistsareverymuchoutoffavourinmodernanalysis;astheyhaveprovedspectacularlyunsuccessfulatachievingtheiraims;buttheyarestillseentothisday.\nAsanalternativetorequirementlists,AgileSoftwareDevelopmentusesUserstoriestosuggestrequirementsineverydaylanguage.\nBestpracticestakethecomposedlistofrequirementsmerelyascluesandrepeatedlyask"why?"untiltheactualbusinesspurposesarediscovered.Stakeholdersanddeveloperscanthendeviseteststomeasurewhatlevelofeachgoalhasbeenachievedthusfar.Suchgoalschangemoreslowlythanthelonglistofspecificbutunmeasuredrequirements.Onceasmallsetofcritical,measuredgoalshasbeenestablished,rapidprototypingandshortiterativedevelopmentphasesmayproceedtodeliveractualstakeholdervaluelongbeforetheprojectishalfover.\nAprototypeisacomputerprogramthatexhibitsapartofthepropertiesofanothercomputerprogram,allowinguserstovisualizeanapplicationthathasnotyetbeenconstructed.Apopularformofprototypeisamockup,whichhelpsfutureusersandotherstakeholderstogetanideaofwhatthesystemwilllooklike.Prototypesmakeiteasiertomakedesigndecisions,becauseaspectsoftheapplicationcanbeseenandsharedbeforetheapplicationisbuilt.Majorimprovementsincommunicationbetweenusersanddeveloperswereoftenseenwiththeintroductionofprototypes.Earlyviewsofapplicationsledtofewerchangeslaterandhencereducedoverallcostsconsiderably.[citationneeded]\nPrototypescanbeflatdiagrams(oftenreferredtoaswireframes)orworkingapplicationsusingsynthesizedfunctionality.Wireframesaremadeinavarietyofgraphicdesigndocuments,andoftenremoveallcolorfromthedesign(i.e.useagreyscalecolorpalette)ininstanceswherethefinalsoftwareisexpectedtohavegraphicdesignappliedtoit.Thishelpstopreventconfusionastowhethertheprototyperepresentsthefinalvisuallookandfeeloftheapplication.[citationneeded]\nAusecaseisastructurefordocumentingthefunctionalrequirementsforasystem,usuallyinvolvingsoftware,whetherthatisneworbeingchanged.Eachusecaseprovidesasetofscenariosthatconveyhowthesystemshouldinteractwithahumanuseroranothersystem,toachieveaspecificbusinessgoal.Usecasestypicallyavoidtechnicaljargon,preferringinsteadthelanguageoftheend-userordomainexpert.Usecasesareoftenco-authoredbyrequirementsengineersandstakeholders.\nUsecasesaredeceptivelysimpletoolsfordescribingthebehaviorofsoftwareorsystems.Ausecasecontainsatextualdescriptionofthewaysinwhichusersareintendedtoworkwiththesoftwareorsystem.Usecasesshouldnotdescribeinternalworkingsofthesystem,norshouldtheyexplainhowthatsystemwillbeimplemented.Instead,theyshowthestepsneededtoperformataskwithoutsequentialassumptions.\nRequirementsarecategorizedinseveralways.Thefollowingarecommoncategorizationsofrequirementsthatrelatetotechnicalmanagement:[1]\nWell-knownrequirementscategorizationmodelsincludeFURPSandFURPS+,developedatHewlett-Packard.\nSteveMcConnell,inhisbookRapidDevelopment,detailsanumberofwaysuserscaninhibitrequirementsgathering:\nThismayleadtothesituationwhereuserrequirementskeepchangingevenwhensystemorproductdevelopmenthasbeenstarted.\nPossibleproblemscausedbyengineersanddevelopersduringrequirementsanalysisare:\nOneattemptedsolutiontocommunicationsproblemshasbeentoemployspecialistsinbusinessorsystemanalysis.\nTechniquesintroducedinthe1990slikeprototyping,UnifiedModelingLanguage(UML),usecases,andagilesoftwaredevelopmentarealsointendedassolutionstoproblemsencounteredwithpreviousmethods.\nAlso,anewclassofapplicationsimulationorapplicationdefinitiontoolshaveenteredthemarket.ThesetoolsaredesignedtobridgethecommunicationgapbetweenbusinessusersandtheITorganization\xe2\x80\x94andalsotoallowapplicationstobe\'testmarketed\'beforeanycodeisproduced.Thebestofthesetoolsoffer:\n