\n\nAprogramminglanguageisaformallanguage,whichcomprisesasetofinstructionsusedtoproducevariouskindsofoutput.Programminglanguagesareusedincomputerprogrammingtocreateprogramsthatimplementspecificalgorithms.\nMostprogramminglanguagesconsistofinstructionsforcomputers,althoughthereareprogrammablemachinesthatusealimitedsetofspecificinstructions,ratherthanthegeneralprogramminglanguagesofmoderncomputers.Earlyonesprecededtheinventionofthedigitalcomputer,thefirstprobablybeingtheautomaticfluteplayerdescribedinthe9thcenturybythebrothersMusainBaghdad,duringtheIslamicGoldenAge.[1]Fromtheearly1800s,programswereusedtodirectthebehaviorofmachinessuchasJacquardlooms,musicboxesandplayerpianos.[2]However,theirprograms(suchasaplayerpiano\'sscrolls)couldnotproducedifferentbehaviorinresponsetosomeinputorcondition.\nThousandsofdifferentprogramminglanguageshavebeencreated,mainlyinthecomputerfield,andmanymorestillarebeingcreatedeveryyear.Manyprogramminglanguagesrequirecomputationtobespecifiedinanimperativeform(i.e.,asasequenceofoperationstoperform)whileotherlanguagesuseotherformsofprogramspecificationsuchasthedeclarativeform(i.e.thedesiredresultisspecified,nothowtoachieveit).\nThedescriptionofaprogramminglanguageisusuallysplitintothetwocomponentsofsyntax(form)andsemantics(meaning).Somelanguagesaredefinedbyaspecificationdocument(forexample,theCprogramminglanguageisspecifiedbyanISOStandard)whileotherlanguages(suchasPerl)haveadominantimplementationthatistreatedasareference.Somelanguageshaveboth,withthebasiclanguagedefinedbyastandardandextensionstakenfromthedominantimplementationbeingcommon.\nAprogramminglanguageisanotationforwritingprograms,whicharespecificationsofacomputationoralgorithm.[3]Some,butnotall,authorsrestricttheterm"programminglanguage"tothoselanguagesthatcanexpressallpossiblealgorithms.[3][4]Traitsoftenconsideredimportantforwhatconstitutesaprogramminglanguageinclude:\nMarkuplanguageslikeXML,HTML,ortroff,whichdefinestructureddata,arenotusuallyconsideredprogramminglanguages.[13][14][15]Programminglanguagesmay,however,sharethesyntaxwithmarkuplanguagesifacomputationalsemanticsisdefined.XSLT,forexample,isaTuringcompletelanguageentirelyusingXMLsyntax.[16][17][18]Moreover,LaTeX,whichismostlyusedforstructuringdocuments,alsocontainsaTuringcompletesubset.[19][20]\nThetermcomputerlanguageissometimesusedinterchangeablywithprogramminglanguage.[21]However,theusageofbothtermsvariesamongauthors,includingtheexactscopeofeach.Oneusagedescribesprogramminglanguagesasasubsetofcomputerlanguages.[22]Inthisvein,languagesusedincomputingthathaveadifferentgoalthanexpressingcomputerprogramsaregenericallydesignatedcomputerlanguages.Forinstance,markuplanguagesaresometimesreferredtoascomputerlanguagestoemphasizethattheyarenotmeanttobeusedforprogramming.[23]\nAnotherusageregardsprogramminglanguagesastheoreticalconstructsforprogrammingabstractmachines,andcomputerlanguagesasthesubsetthereofthatrunsonphysicalcomputers,whichhavefinitehardwareresources.[24]JohnC.Reynoldsemphasizesthatformalspecificationlanguagesarejustasmuchprogramminglanguagesasarethelanguagesintendedforexecution.Healsoarguesthattextualandevengraphicalinputformatsthataffectthebehaviorofacomputerareprogramminglanguages,despitethefacttheyarecommonlynotTuring-complete,andremarksthatignoranceofprogramminglanguageconceptsisthereasonformanyflawsininputformats.[25]\nVeryearlycomputers,suchasColossus,wereprogrammedwithoutthehelpofastoredprogram,bymodifyingtheircircuitryorsettingbanksofphysicalcontrols.\nSlightlylater,programscouldbewritteninmachinelanguage,wheretheprogrammerwriteseachinstructioninanumericformthehardwarecanexecutedirectly.Forexample,theinstructiontoaddthevalueintwomemorylocationmightconsistof3numbers:an"opcode"thatselectsthe"add"operation,andtwomemorylocations.Theprograms,indecimalorbinaryform,werereadinfrompunchedcardsorpapertapeormagnetictapeortoggledinonswitchesonthefrontpanelofthecomputer.Machinelanguageswerelatertermedfirst-generationprogramminglanguages(1GL).\nThenextstepwasdevelopmentofso-calledsecond-generationprogramminglanguages(2GL)orassemblylanguages,whichwerestillcloselytiedtotheinstructionsetarchitectureofthespecificcomputer.Theseservedtomaketheprogrammuchmorehuman-readableandrelievedtheprogrammeroftediousanderror-proneaddresscalculations.\nThefirsthigh-levelprogramminglanguages,orthird-generationprogramminglanguages(3GL),werewritteninthe1950s.Anearlyhigh-levelprogramminglanguagetobedesignedforacomputerwasPlankalk\xc3\xbcl,developedfortheGermanZ3byKonradZusebetween1943and1945.However,itwasnotimplementeduntil1998and2000.[26]\nJohnMauchly\'sShortCode,proposedin1949,wasoneofthefirsthigh-levellanguageseverdevelopedforanelectroniccomputer.[27]Unlikemachinecode,ShortCodestatementsrepresentedmathematicalexpressionsinunderstandableform.However,theprogramhadtobetranslatedintomachinecodeeverytimeitran,makingtheprocessmuchslowerthanrunningtheequivalentmachinecode.\nAttheUniversityofManchester,AlickGlenniedevelopedAutocodeintheearly1950s.Aprogramminglanguage,itusedacompilertoautomaticallyconvertthelanguageintomachinecode.Thefirstcodeandcompilerwasdevelopedin1952fortheMark1computerattheUniversityofManchesterandisconsideredtobethefirstcompiledhigh-levelprogramminglanguage.[28][29]\nThesecondautocodewasdevelopedfortheMark1byR.A.Brookerin1954andwascalledthe"Mark1Autocode".BrookeralsodevelopedanautocodefortheFerrantiMercuryinthe1950sinconjunctionwiththeUniversityofManchester.TheversionfortheEDSAC2wasdevisedbyD.F.HartleyofUniversityofCambridgeMathematicalLaboratoryin1961.KnownasEDSAC2Autocode,itwasastraightdevelopmentfromMercuryAutocodeadaptedforlocalcircumstancesandwasnotedforitsobjectcodeoptimisationandsource-languagediagnosticswhichwereadvancedforthetime.Acontemporarybutseparatethreadofdevelopment,AtlasAutocodewasdevelopedfortheUniversityofManchesterAtlas1machine.\nIn1954,FORTRANwasinventedatIBMbyJohnBackus.Itwasthefirstwidelyusedhigh-levelgeneralpurposeprogramminglanguagetohaveafunctionalimplementation,asopposedtojustadesignonpaper.[30][31]Itisstillapopularlanguageforhigh-performancecomputing[32]andisusedforprogramsthatbenchmarkandranktheworld\'sfastestsupercomputers.[33]\nAnotherearlyprogramminglanguagewasdevisedbyGraceHopperintheUS,calledFLOW-MATIC.ItwasdevelopedfortheUNIVACIatRemingtonRandduringtheperiodfrom1955until1959.Hopperfoundthatbusinessdataprocessingcustomerswereuncomfortablewithmathematicalnotation,andinearly1955,sheandherteamwroteaspecificationforanEnglishprogramminglanguageandimplementedaprototype.[34]TheFLOW-MATICcompilerbecamepubliclyavailableinearly1958andwassubstantiallycompletein1959.[35]Flow-MaticwasamajorinfluenceinthedesignofCOBOL,sinceonlyitanditsdirectdescendantAIMACOwereinactualuseatthetime.[36]\nTheincreaseduseofhigh-levellanguagesintroducedarequirementforlow-levelprogramminglanguagesorsystemprogramminglanguages.Theselanguages,tovaryingdegrees,providefacilitiesbetweenassemblylanguagesandhigh-levellanguagesandcanbeusedtoperformtaskswhichrequiredirectaccesstohardwarefacilitiesbutstillprovidehigher-levelcontrolstructuresanderror-checking.\nTheperiodfromthe1960stothelate1970sbroughtthedevelopmentofthemajorlanguageparadigmsnowinuse:\nEachoftheselanguagesspawneddescendants,andmostmodernprogramminglanguagescountatleastoneofthemintheirancestry.\nThe1960sand1970salsosawconsiderabledebateoverthemeritsofstructuredprogramming,andwhetherprogramminglanguagesshouldbedesignedtosupportit.[39]EdsgerDijkstra,inafamous1968letterpublishedintheCommunicationsoftheACM,arguedthatGOTOstatementsshouldbeeliminatedfromall"higherlevel"programminglanguages.[40]\nThe1980swereyearsofrelativeconsolidation.C++combinedobject-orientedandsystemsprogramming.TheUnitedStatesgovernmentstandardizedAda,asystemsprogramminglanguagederivedfromPascalandintendedforusebydefensecontractors.InJapanandelsewhere,vastsumswerespentinvestigatingso-called"fifthgeneration"languagesthatincorporatedlogicprogrammingconstructs.[41]ThefunctionallanguagescommunitymovedtostandardizeMLandLisp.Ratherthaninventingnewparadigms,allofthesemovementselaboratedupontheideasinventedinthepreviousdecades.\nOneimportanttrendinlanguagedesignforprogramminglarge-scalesystemsduringthe1980swasanincreasedfocusontheuseofmodulesorlarge-scaleorganizationalunitsofcode.Modula-2,Ada,andMLalldevelopednotablemodulesystemsinthe1980s,whichwereoftenweddedtogenericprogrammingconstructs.[42]\nTherapidgrowthoftheInternetinthemid-1990screatedopportunitiesfornewlanguages.Perl,originallyaUnixscriptingtoolfirstreleasedin1987,becamecommonindynamicwebsites.Javacametobeusedforserver-sideprogramming,andbytecodevirtualmachinesbecamepopularagainincommercialsettingswiththeirpromiseof"Writeonce,runanywhere"(UCSDPascalhadbeenpopularforatimeintheearly1980s).Thesedevelopmentswerenotfundamentallynovel,rathertheywererefinementsofmanyexistinglanguagesandparadigms(althoughtheirsyntaxwasoftenbasedontheCfamilyofprogramminglanguages).\nProgramminglanguageevolutioncontinues,inbothindustryandresearch.Currentdirectionsincludesecurityandreliabilityverification,newkindsofmodularity(mixins,delegates,aspects),anddatabaseintegrationsuchasMicrosoft\'sLINQ.\nFourth-generationprogramminglanguages(4GL)arecomputerprogramminglanguageswhichaimtoprovideahigherlevelofabstractionoftheinternalcomputerhardwaredetailsthan3GLs.Fifthgenerationprogramminglanguages(5GL)areprogramminglanguagesbasedonsolvingproblemsusingconstraintsgiventotheprogram,ratherthanusinganalgorithmwrittenbyaprogrammer.\nAllprogramminglanguageshavesomeprimitivebuildingblocksforthedescriptionofdataandtheprocessesortransformationsappliedtothem(liketheadditionoftwonumbersortheselectionofanitemfromacollection).Theseprimitivesaredefinedbysyntacticandsemanticruleswhichdescribetheirstructureandmeaningrespectively.\nAprogramminglanguage\'ssurfaceformisknownasitssyntax.Mostprogramminglanguagesarepurelytextual;theyusesequencesoftextincludingwords,numbers,andpunctuation,muchlikewrittennaturallanguages.Ontheotherhand,therearesomeprogramminglanguageswhicharemoregraphicalinnature,usingvisualrelationshipsbetweensymbolstospecifyaprogram.\nThesyntaxofalanguagedescribesthepossiblecombinationsofsymbolsthatformasyntacticallycorrectprogram.Themeaninggiventoacombinationofsymbolsishandledbysemantics(eitherformalorhard-codedinareferenceimplementation).Sincemostlanguagesaretextual,thisarticlediscussestextualsyntax.\nProgramminglanguagesyntaxisusuallydefinedusingacombinationofregularexpressions(forlexicalstructure)andBackus\xe2\x80\x93Naurform(forgrammaticalstructure).Belowisasimplegrammar,basedonLisp:\nThisgrammarspecifiesthefollowing:\nThefollowingareexamplesofwell-formedtokensequencesinthisgrammar:12345,()and(abc232(1)).\nNotallsyntacticallycorrectprogramsaresemanticallycorrect.Manysyntacticallycorrectprogramsarenonethelessill-formed,perthelanguage\'srules;andmay(dependingonthelanguagespecificationandthesoundnessoftheimplementation)resultinanerrorontranslationorexecution.Insomecases,suchprogramsmayexhibitundefinedbehavior.Evenwhenaprogramiswell-definedwithinalanguage,itmaystillhaveameaningthatisnotintendedbythepersonwhowroteit.\nUsingnaturallanguageasanexample,itmaynotbepossibletoassignameaningtoagrammaticallycorrectsentenceorthesentencemaybefalse:\nThefollowingClanguagefragmentissyntacticallycorrect,butperformsoperationsthatarenotsemanticallydefined(theoperation*p>>4hasnomeaningforavaluehavingacomplextypeandp->imisnotdefinedbecausethevalueofpisthenullpointer):\nIfthetypedeclarationonthefirstlinewereomitted,theprogramwouldtriggeranerroronundefinedvariable"p"duringcompilation.However,theprogramwouldstillbesyntacticallycorrectsincetypedeclarationsprovideonlysemanticinformation.\nThegrammarneededtospecifyaprogramminglanguagecanbeclassifiedbyitspositionintheChomskyhierarchy.ThesyntaxofmostprogramminglanguagescanbespecifiedusingaType-2grammar,i.e.,theyarecontext-freegrammars.[43]Somelanguages,includingPerlandLisp,containconstructsthatallowexecutionduringtheparsingphase.Languagesthathaveconstructsthatallowtheprogrammertoalterthebehavioroftheparsermakesyntaxanalysisanundecidableproblem,andgenerallyblurthedistinctionbetweenparsingandexecution.[44]IncontrasttoLisp\'smacrosystemandPerl\'sBEGINblocks,whichmaycontaingeneralcomputations,Cmacrosaremerelystringreplacementsanddonotrequirecodeexecution.[45]\nThetermsemanticsreferstothemeaningoflanguages,asopposedtotheirform(syntax).\nThestaticsemanticsdefinesrestrictionsonthestructureofvalidtextsthatarehardorimpossibletoexpressinstandardsyntacticformalisms.[3]Forcompiledlanguages,staticsemanticsessentiallyincludethosesemanticrulesthatcanbecheckedatcompiletime.Examplesincludecheckingthateveryidentifierisdeclaredbeforeitisused(inlanguagesthatrequiresuchdeclarations)orthatthelabelsonthearmsofacasestatementaredistinct.[46]Manyimportantrestrictionsofthistype,likecheckingthatidentifiersareusedintheappropriatecontext(e.g.notaddinganintegertoafunctionname),orthatsubroutinecallshavetheappropriatenumberandtypeofarguments,canbeenforcedbydefiningthemasrulesinalogiccalledatypesystem.Otherformsofstaticanalyseslikedataflowanalysismayalsobepartofstaticsemantics.NewerprogramminglanguageslikeJavaandC#havedefiniteassignmentanalysis,aformofdataflowanalysis,aspartoftheirstaticsemantics.\nOncedatahasbeenspecified,themachinemustbeinstructedtoperformoperationsonthedata.Forexample,thesemanticsmaydefinethestrategybywhichexpressionsareevaluatedtovalues,orthemannerinwhichcontrolstructuresconditionallyexecutestatements.Thedynamicsemantics(alsoknownasexecutionsemantics)ofalanguagedefineshowandwhenthevariousconstructsofalanguageshouldproduceaprogrambehavior.Therearemanywaysofdefiningexecutionsemantics.Naturallanguageisoftenusedtospecifytheexecutionsemanticsoflanguagescommonlyusedinpractice.Asignificantamountofacademicresearchwentintoformalsemanticsofprogramminglanguages,whichallowexecutionsemanticstobespecifiedinaformalmanner.Resultsfromthisfieldofresearchhaveseenlimitedapplicationtoprogramminglanguagedesignandimplementationoutsideacademia.\nAtypesystemdefineshowaprogramminglanguageclassifiesvaluesandexpressionsintotypes,howitcanmanipulatethosetypesandhowtheyinteract.Thegoalofatypesystemistoverifyandusuallyenforceacertainlevelofcorrectnessinprogramswritteninthatlanguagebydetectingcertainincorrectoperations.Anydecidabletypesysteminvolvesatrade-off:whileitrejectsmanyincorrectprograms,itcanalsoprohibitsomecorrect,albeitunusualprograms.Inordertobypassthisdownside,anumberoflanguageshavetypeloopholes,usuallyuncheckedcaststhatmaybeusedbytheprogrammertoexplicitlyallowanormallydisallowedoperationbetweendifferenttypes.Inmosttypedlanguages,thetypesystemisusedonlytotypecheckprograms,butanumberoflanguages,usuallyfunctionalones,infertypes,relievingtheprogrammerfromtheneedtowritetypeannotations.Theformaldesignandstudyoftypesystemsisknownastypetheory.\nAlanguageistypedifthespecificationofeveryoperationdefinestypesofdatatowhichtheoperationisapplicable,withtheimplicationthatitisnotapplicabletoothertypes.[47]Forexample,thedatarepresentedby"thistextbetweenthequotes"isastring,andinmanyprogramminglanguagesdividinganumberbyastringhasnomeaningandwillberejectedbythecompilers.Theinvalidoperationmaybedetectedwhentheprogramiscompiled("static"typechecking)andwillberejectedbythecompilerwithacompilationerrormessage,oritmaybedetectedwhentheprogramisrun("dynamic"typechecking),resultinginarun-timeexception.Manylanguagesallowafunctioncalledanexceptionhandlertobewrittentohandlethisexceptionand,forexample,alwaysreturn"-1"astheresult.\nAspecialcaseoftypedlanguagesarethesingle-typelanguages.Theseareoftenscriptingormarkuplanguages,suchasREXXorSGML,andhaveonlyonedatatype[dubious–discuss]-\xe2\x80\x94mostcommonlycharacterstringswhichareusedforbothsymbolicandnumericdata.\nIncontrast,anuntypedlanguage,suchasmostassemblylanguages,allowsanyoperationtobeperformedonanydata,whicharegenerallyconsideredtobesequencesofbitsofvariouslengths.[47]High-levellanguageswhichareuntypedincludeBCPL,Tcl,andsomevarietiesofForth.\nInpractice,whilefewlanguagesareconsideredtypedfromthepointofviewoftypetheory(verifyingorrejectingalloperations),mostmodernlanguagesofferadegreeoftyping.[47]Manyproductionlanguagesprovidemeanstobypassorsubvertthetypesystem,tradingtype-safetyforfinercontrolovertheprogram\'sexecution(seecasting).\nInstatictyping,allexpressionshavetheirtypesdeterminedpriortowhentheprogramisexecuted,typicallyatcompile-time.Forexample,1and(2+2)areintegerexpressions;theycannotbepassedtoafunctionthatexpectsastring,orstoredinavariablethatisdefinedtoholddates.[47]\nStaticallytypedlanguagescanbeeithermanifestlytypedortype-inferred.Inthefirstcase,theprogrammermustexplicitlywritetypesatcertaintextualpositions(forexample,atvariabledeclarations).Inthesecondcase,thecompilerinfersthetypesofexpressionsanddeclarationsbasedoncontext.Mostmainstreamstaticallytypedlanguages,suchasC++,C#andJava,aremanifestlytyped.Completetypeinferencehastraditionallybeenassociatedwithlessmainstreamlanguages,suchasHaskellandML.However,manymanifestlytypedlanguagessupportpartialtypeinference;forexample,C++,JavaandC#allinfertypesincertainlimitedcases.[48]Additionally,someprogramminglanguagesallowforsometypestobeautomaticallyconvertedtoothertypes;forexample,anintcanbeusedwheretheprogramexpectsafloat.\nDynamictyping,alsocalledlatenttyping,determinesthetype-safetyofoperationsatruntime;inotherwords,typesareassociatedwithrun-timevaluesratherthantextualexpressions.[47]Aswithtype-inferredlanguages,dynamicallytypedlanguagesdonotrequiretheprogrammertowriteexplicittypeannotationsonexpressions.Amongotherthings,thismaypermitasinglevariabletorefertovaluesofdifferenttypesatdifferentpointsintheprogramexecution.However,typeerrorscannotbeautomaticallydetecteduntilapieceofcodeisactuallyexecuted,potentiallymakingdebuggingmoredifficult.Lisp,Smalltalk,Perl,Python,JavaScript,andRubyareallexamplesofdynamicallytypedlanguages.\nWeaktypingallowsavalueofonetypetobetreatedasanother,forexampletreatingastringasanumber.[47]Thiscanoccasionallybeuseful,butitcanalsoallowsomekindsofprogramfaultstogoundetectedatcompiletimeandevenatruntime.\nStrongtypingpreventstheabove.Anattempttoperformanoperationonthewrongtypeofvalueraisesanerror.[47]Stronglytypedlanguagesareoftentermedtype-safeorsafe.\nAnalternativedefinitionfor"weaklytyped"referstolanguages,suchasPerlandJavaScript,whichpermitalargenumberofimplicittypeconversions.InJavaScript,forexample,theexpression2*ximplicitlyconvertsxtoanumber,andthisconversionsucceedsevenifxisnull,undefined,anArray,orastringofletters.Suchimplicitconversionsareoftenuseful,buttheycanmaskprogrammingerrors.\nStrongandstaticarenowgenerallyconsideredorthogonalconcepts,butusageintheliteraturediffers.Someusethetermstronglytypedtomeanstrongly,staticallytyped,or,evenmoreconfusingly,tomeansimplystaticallytyped.ThusChasbeencalledbothstronglytypedandweakly,staticallytyped.[49][50]\nItmayseemoddtosomeprofessionalprogrammersthatCcouldbe"weakly,staticallytyped".However,noticethattheuseofthegenericpointer,thevoid*pointer,doesallowforcastingofpointerstootherpointerswithoutneedingtodoanexplicitcast.ThisisextremelysimilartosomehowcastinganarrayofbytestoanykindofdatatypeinCwithoutusinganexplicitcast,suchas(int)or(char).\nMostprogramminglanguageshaveanassociatedcorelibrary(sometimesknownasthe\'standardlibrary\',especiallyifitisincludedaspartofthepublishedlanguagestandard),whichisconventionallymadeavailablebyallimplementationsofthelanguage.Corelibrariestypicallyincludedefinitionsforcommonlyusedalgorithms,datastructures,andmechanismsforinputandoutput.\nThelinebetweenalanguageanditscorelibrarydiffersfromlanguagetolanguage.Insomecases,thelanguagedesignersmaytreatthelibraryasaseparateentityfromthelanguage.However,alanguage\'scorelibraryisoftentreatedaspartofthelanguagebyitsusers,andsomelanguagespecificationsevenrequirethatthislibrarybemadeavailableinallimplementations.Indeed,somelanguagesaredesignedsothatthemeaningsofcertainsyntacticconstructscannotevenbedescribedwithoutreferringtothecorelibrary.Forexample,inJava,astringliteralisdefinedasaninstanceofthejava.lang.Stringclass;similarly,inSmalltalk,ananonymousfunctionexpression(a"block")constructsaninstanceofthelibrary\'sBlockContextclass.Conversely,Schemecontainsmultiplecoherentsubsetsthatsufficetoconstructtherestofthelanguageaslibrarymacros,andsothelanguagedesignersdonotevenbothertosaywhichportionsofthelanguagemustbeimplementedaslanguageconstructs,andwhichmustbeimplementedaspartsofalibrary.\nProgramminglanguagessharepropertieswithnaturallanguagesrelatedtotheirpurposeasvehiclesforcommunication,havingasyntacticformseparatefromitssemantics,andshowinglanguagefamiliesofrelatedlanguagesbranchingonefromanother.[51][52]Butasartificialconstructs,theyalsodifferinfundamentalwaysfromlanguagesthathaveevolvedthroughusage.Asignificantdifferenceisthataprogramminglanguagecanbefullydescribedandstudiedinitsentirety,sinceithasapreciseandfinitedefinition.[53]Bycontrast,naturallanguageshavechangingmeaningsgivenbytheirusersindifferentcommunities.Whileconstructedlanguagesarealsoartificiallanguagesdesignedfromthegroundupwithaspecificpurpose,theylackthepreciseandcompletesemanticdefinitionthataprogramminglanguagehas.\nManyprogramminglanguageshavebeendesignedfromscratch,alteredtomeetnewneeds,andcombinedwithotherlanguages.Manyhaveeventuallyfallenintodisuse.Althoughtherehavebeenattemptstodesignone"universal"programminglanguagethatservesallpurposes,allofthemhavefailedtobegenerallyacceptedasfillingthisrole.[54]Theneedfordiverseprogramminglanguagesarisesfromthediversityofcontextsinwhichlanguagesareused:\nOnecommontrendinthedevelopmentofprogramminglanguageshasbeentoaddmoreabilitytosolveproblemsusingahigherlevelofabstraction.Theearliestprogramminglanguagesweretiedverycloselytotheunderlyinghardwareofthecomputer.Asnewprogramminglanguageshavedeveloped,featureshavebeenaddedthatletprogrammersexpressideasthataremoreremotefromsimpletranslationintounderlyinghardwareinstructions.Becauseprogrammersarelesstiedtothecomplexityofthecomputer,theirprogramscandomorecomputingwithlesseffortfromtheprogrammer.Thisletsthemwritemorefunctionalitypertimeunit.[55]\n\nNaturallanguageprogramminghasbeenproposedasawaytoeliminatetheneedforaspecializedlanguageforprogramming.However,thisgoalremainsdistantanditsbenefitsareopentodebate.EdsgerW.Dijkstratookthepositionthattheuseofaformallanguageisessentialtopreventtheintroductionofmeaninglessconstructs,anddismissednaturallanguageprogrammingas"foolish".[56]AlanPerliswassimilarlydismissiveoftheidea.[57]HybridapproacheshavebeentakeninStructuredEnglishandSQL.\nAlanguage\'sdesignersandusersmustconstructanumberofartifactsthatgovernandenablethepracticeofprogramming.Themostimportantoftheseartifactsarethelanguagespecificationandimplementation.\nThespecificationofaprogramminglanguageisanartifactthatthelanguageusersandtheimplementorscanusetoagreeuponwhetherapieceofsourcecodeisavalidprograminthatlanguage,andifsowhatitsbehaviorshallbe.\nAprogramminglanguagespecificationcantakeseveralforms,includingthefollowing:\nAnimplementationofaprogramminglanguageprovidesawaytowriteprogramsinthatlanguageandexecutethemononeormoreconfigurationsofhardwareandsoftware.Thereare,broadly,twoapproachestoprogramminglanguageimplementation:compilationandinterpretation.Itisgenerallypossibletoimplementalanguageusingeithertechnique.\nTheoutputofacompilermaybeexecutedbyhardwareoraprogramcalledaninterpreter.Insomeimplementationsthatmakeuseoftheinterpreterapproachthereisnodistinctboundarybetweencompilingandinterpreting.Forinstance,someimplementationsofBASICcompileandthenexecutethesourcealineatatime.\nProgramsthatareexecuteddirectlyonthehardwareusuallyrunseveralordersofmagnitudefasterthanthosethatareinterpretedinsoftware.[citationneeded]\nOnetechniqueforimprovingtheperformanceofinterpretedprogramsisjust-in-timecompilation.Herethevirtualmachine,justbeforeexecution,translatestheblocksofbytecodewhicharegoingtobeusedtomachinecode,fordirectexecutiononthehardware.\nAlthoughmostofthemostcommonlyusedprogramminglanguageshavefullyopenspecificationsandimplementations,manyprogramminglanguagesexistonlyasproprietaryprogramminglanguageswiththeimplementationavailableonlyfromasinglevendor,whichmayclaimthatsuchaproprietarylanguageistheirintellectualproperty.Proprietaryprogramminglanguagesarecommonlydomainspecificlanguagesorinternalscriptinglanguagesforasingleproduct;someproprietarylanguagesareusedonlyinternallywithinavendor,whileothersareavailabletoexternalusers.\nSomeprogramminglanguagesexistontheborderbetweenproprietaryandopen;forexample,OracleCorporationassertsproprietaryrightstosomeaspectsoftheJavaprogramminglanguage,[61]andMicrosoft\'sC#programminglanguage,whichhasopenimplementationsofmostpartsofthesystem,alsohasCommonLanguageRuntime(CLR)asaclosedenvironment.[62]\nManyproprietarylanguagesarewidelyused,inspiteoftheirproprietarynature;examplesincludeMATLAB,VBScript,andWolframLanguage.Somelanguagesmaymakethetransitionfromclosedtoopen;forexample,ErlangwasoriginallyanEricsson\'sinternalprogramminglanguage.[63]\nThousandsofdifferentprogramminglanguageshavebeencreated,mainlyinthecomputingfield.[64]\nSoftwareiscommonlybuiltwith5programminglanguagesormore.[65]\nProgramminglanguagesdifferfrommostotherformsofhumanexpressioninthattheyrequireagreaterdegreeofprecisionandcompleteness.Whenusinganaturallanguagetocommunicatewithotherpeople,humanauthorsandspeakerscanbeambiguousandmakesmallerrors,andstillexpecttheirintenttobeunderstood.However,figurativelyspeaking,computers"doexactlywhattheyaretoldtodo",andcannot"understand"whatcodetheprogrammerintendedtowrite.Thecombinationofthelanguagedefinition,aprogram,andtheprogram\'sinputsmustfullyspecifytheexternalbehaviorthatoccurswhentheprogramisexecuted,withinthedomainofcontrolofthatprogram.Ontheotherhand,ideasaboutanalgorithmcanbecommunicatedtohumanswithouttheprecisionrequiredforexecutionbyusingpseudocode,whichinterleavesnaturallanguagewithcodewritteninaprogramminglanguage.\nAprogramminglanguageprovidesastructuredmechanismfordefiningpiecesofdata,andtheoperationsortransformationsthatmaybecarriedoutautomaticallyonthatdata.Aprogrammerusestheabstractionspresentinthelanguagetorepresenttheconceptsinvolvedinacomputation.Theseconceptsarerepresentedasacollectionofthesimplestelementsavailable(calledprimitives).[66]Programmingistheprocessbywhichprogrammerscombinetheseprimitivestocomposenewprograms,oradaptexistingonestonewusesorachangingenvironment.\nProgramsforacomputermightbeexecutedinabatchprocesswithouthumaninteraction,orausermighttypecommandsinaninteractivesessionofaninterpreter.Inthiscasethe"commands"aresimplyprograms,whoseexecutionischainedtogether.Whenalanguagecanrunitscommandsthroughaninterpreter(suchasaUnixshellorothercommand-lineinterface),withoutcompiling,itiscalledascriptinglanguage.[67]\nDeterminingwhichisthemostwidelyusedprogramminglanguageisdifficultsincethedefinitionofusagevariesbycontext.Onelanguagemayoccupythegreaternumberofprogrammerhours,adifferentonehasmorelinesofcode,andathirdmayconsumethemostCPUtime.Somelanguagesareverypopularforparticularkindsofapplications.Forexample,COBOLisstillstronginthecorporatedatacenter,oftenonlargemainframes;[68][69]Fortraninscientificandengineeringapplications;Adainaerospace,transportation,military,real-timeandembeddedapplications;andCinembeddedapplicationsandoperatingsystems.Otherlanguagesareregularlyusedtowritemanydifferentkindsofapplications.\nVariousmethodsofmeasuringlanguagepopularity,eachsubjecttoadifferentbiasoverwhatismeasured,havebeenproposed:\nCombiningandaveraginginformationfromvariousinternetsites,stackify.comreportedthetenmostpopularprogramminglanguagesas(indescendingorderbyoverallpopularity):Java,C,C++,Python,C#,JavaScript,VB.NET,R,PHP,andMATLAB.[73]\nAdialectofaprogramminglanguageoradataexchangelanguageisa(relativelysmall)variationorextensionofthelanguagethatdoesnotchangeitsintrinsicnature.WithlanguagessuchasSchemeandForth,standardsmaybeconsideredinsufficient,inadequateorillegitimatebyimplementors,sooftentheywilldeviatefromthestandard,makinganewdialect.Inothercases,adialectiscreatedforuseinadomain-specificlanguage,oftenasubset.IntheLispworld,mostlanguagesthatusebasicS-expressionsyntaxandLisp-likesemanticsareconsideredLispdialects,althoughtheyvarywildly,asdo,say,RacketandClojure.Asitiscommonforonelanguagetohaveseveraldialects,itcanbecomequitedifficultforaninexperiencedprogrammertofindtherightdocumentation.TheBASICprogramminglanguagehasmanydialects.\nTheexplosionofForthdialectsledtothesaying"Ifyou\'veseenoneForth...you\'veseenoneForth."\nThereisnooverarchingclassificationschemeforprogramminglanguages.Agivenprogramminglanguagedoesnotusuallyhaveasingleancestorlanguage.Languagescommonlyarisebycombiningtheelementsofseveralpredecessorlanguageswithnewideasincirculationatthetime.Ideasthatoriginateinonelanguagewilldiffusethroughoutafamilyofrelatedlanguages,andthenleapsuddenlyacrossfamilialgapstoappearinanentirelydifferentfamily.\nThetaskisfurthercomplicatedbythefactthatlanguagescanbeclassifiedalongmultipleaxes.Forexample,Javaisbothanobject-orientedlanguage(becauseitencouragesobject-orientedorganization)andaconcurrentlanguage(becauseitcontainsbuilt-inconstructsforrunningmultiplethreadsinparallel).Pythonisanobject-orientedscriptinglanguage.\nInbroadstrokes,programminglanguagesdivideintoprogrammingparadigmsandaclassificationbyintendeddomainofuse,withgeneral-purposeprogramminglanguagesdistinguishedfromdomain-specificprogramminglanguages.Traditionally,programminglanguageshavebeenregardedasdescribingcomputationintermsofimperativesentences,i.e.issuingcommands.Thesearegenerallycalledimperativeprogramminglanguages.Agreatdealofresearchinprogramminglanguageshasbeenaimedatblurringthedistinctionbetweenaprogramasasetofinstructionsandaprogramasanassertionaboutthedesiredanswer,whichisthemainfeatureofdeclarativeprogramming.[74]Morerefinedparadigmsincludeproceduralprogramming,object-orientedprogramming,functionalprogramming,andlogicprogramming;somelanguagesarehybridsofparadigmsormulti-paradigmatic.Anassemblylanguageisnotsomuchaparadigmasadirectmodelofanunderlyingmachinearchitecture.Bypurpose,programminglanguagesmightbeconsideredgeneralpurpose,systemprogramminglanguages,scriptinglanguages,domain-specificlanguages,orconcurrent/distributedlanguages(oracombinationofthese).[75]Somegeneralpurposelanguagesweredesignedlargelywitheducationalgoals.[76]\nAprogramminglanguagemayalsobeclassifiedbyfactorsunrelatedtoprogrammingparadigm.Forinstance,mostprogramminglanguagesuseEnglishlanguagekeywords,whileaminoritydonot.Otherlanguagesmaybeclassifiedasbeingdeliberatelyesotericornot.\n