Incomputerscience,theanalysisofalgorithmsisthedeterminationofthecomputationalcomplexityofalgorithms,thatistheamountoftime,storageand/orotherresourcesnecessarytoexecutethem.Usually,thisinvolvesdeterminingafunctionthatrelatesthelengthofanalgorithm\'sinputtothenumberofstepsittakes(itstimecomplexity)orthenumberofstoragelocationsituses(itsspacecomplexity).Analgorithmissaidtobeefficientwhenthisfunction\'svaluesaresmall,orgrowslowlycomparedtoagrowthinthesizeoftheinput.Differentinputsofthesamelengthmaycausethealgorithmtohavedifferentbehavior,sobest,worstandaveragecasedescriptionsmightallbeofpracticalinterest.Whennototherwisespecified,thefunctiondescribingtheperformanceofanalgorithmisusuallyanupperbound,determinedfromtheworstcaseinputstothealgorithm.\nTheterm"analysisofalgorithms"wascoinedbyDonaldKnuth.[1]Algorithmanalysisisanimportantpartofabroadercomputationalcomplexitytheory,whichprovidestheoreticalestimatesfortheresourcesneededbyanyalgorithmwhichsolvesagivencomputationalproblem.Theseestimatesprovideaninsightintoreasonabledirectionsofsearchforefficientalgorithms.\nIntheoreticalanalysisofalgorithmsitiscommontoestimatetheircomplexityintheasymptoticsense,i.e.,toestimatethecomplexityfunctionforarbitrarilylargeinput.BigOnotation,Big-omeganotationandBig-thetanotationareusedtothisend.Forinstance,binarysearchissaidtoruninanumberofstepsproportionaltothelogarithmofthelengthofthesortedlistbeingsearched,orinO(log(n)),colloquially"inlogarithmictime".Usuallyasymptoticestimatesareusedbecausedifferentimplementationsofthesamealgorithmmaydifferinefficiency.Howevertheefficienciesofanytwo"reasonable"implementationsofagivenalgorithmarerelatedbyaconstantmultiplicativefactorcalledahiddenconstant.\nExact(notasymptotic)measuresofefficiencycansometimesbecomputedbuttheyusuallyrequirecertainassumptionsconcerningtheparticularimplementationofthealgorithm,calledmodelofcomputation.Amodelofcomputationmaybedefinedintermsofanabstractcomputer,e.g.,Turingmachine,and/orbypostulatingthatcertainoperationsareexecutedinunittime.\nForexample,ifthesortedlisttowhichweapplybinarysearchhasnelements,andwecanguaranteethateachlookupofanelementinthelistcanbedoneinunittime,thenatmostlog2n+1timeunitsareneededtoreturnananswer.\nTimeefficiencyestimatesdependonwhatwedefinetobeastep.Fortheanalysistocorrespondusefullytotheactualexecutiontime,thetimerequiredtoperformastepmustbeguaranteedtobeboundedabovebyaconstant.Onemustbecarefulhere;forinstance,someanalysescountanadditionoftwonumbersasonestep.Thisassumptionmaynotbewarrantedincertaincontexts.Forexample,ifthenumbersinvolvedinacomputationmaybearbitrarilylarge,thetimerequiredbyasingleadditioncannolongerbeassumedtobeconstant.\nTwocostmodelsaregenerallyused:[2][3][4][5][6]\nThelatterismorecumbersometouse,soit\'sonlyemployedwhennecessary,forexampleintheanalysisofarbitrary-precisionarithmeticalgorithms,likethoseusedincryptography.\nAkeypointwhichisoftenoverlookedisthatpublishedlowerboundsforproblemsareoftengivenforamodelofcomputationthatismorerestrictedthanthesetofoperationsthatyoucoulduseinpracticeandthereforetherearealgorithmsthatarefasterthanwhatwouldnaivelybethoughtpossible.[7]\nRun-timeanalysisisatheoreticalclassificationthatestimatesandanticipatestheincreaseinrunningtime(orrun-time)ofanalgorithmasitsinputsize(usuallydenotedasn)increases.Run-timeefficiencyisatopicofgreatinterestincomputerscience:Aprogramcantakeseconds,hours,orevenyearstofinishexecuting,dependingonwhichalgorithmitimplements.Whilesoftwareprofilingtechniquescanbeusedtomeasureanalgorithm\'srun-timeinpractice,theycannotprovidetimingdataforallinfinitelymanypossibleinputs;thelattercanonlybeachievedbythetheoreticalmethodsofrun-timeanalysis.\nSincealgorithmsareplatform-independent(i.e.agivenalgorithmcanbeimplementedinanarbitraryprogramminglanguageonanarbitrarycomputerrunninganarbitraryoperatingsystem),thereareadditionalsignificantdrawbackstousinganempiricalapproachtogaugethecomparativeperformanceofagivensetofalgorithms.\nTakeasanexampleaprogramthatlooksupaspecificentryinasortedlistofsizen.SupposethisprogramwereimplementedonComputerA,astate-of-the-artmachine,usingalinearsearchalgorithm,andonComputerB,amuchslowermachine,usingabinarysearchalgorithm.Benchmarktestingonthetwocomputersrunningtheirrespectiveprogramsmightlooksomethinglikethefollowing:\nBasedonthesemetrics,itwouldbeeasytojumptotheconclusionthatComputerAisrunninganalgorithmthatisfarsuperiorinefficiencytothatofComputerB.However,ifthesizeoftheinput-listisincreasedtoasufficientnumber,thatconclusionisdramaticallydemonstratedtobeinerror:\nComputerA,runningthelinearsearchprogram,exhibitsalineargrowthrate.Theprogram\'srun-timeisdirectlyproportionaltoitsinputsize.Doublingtheinputsizedoublestheruntime,quadruplingtheinputsizequadruplestherun-time,andsoforth.Ontheotherhand,ComputerB,runningthebinarysearchprogram,exhibitsalogarithmicgrowthrate.Quadruplingtheinputsizeonlyincreasestheruntimebyaconstantamount(inthisexample,50,000ns).EventhoughComputerAisostensiblyafastermachine,ComputerBwillinevitablysurpassComputerAinrun-timebecauseit\'srunninganalgorithmwithamuchslowergrowthrate.\nInformally,analgorithmcanbesaidtoexhibitagrowthrateontheorderofamathematicalfunctionifbeyondacertaininputsizen,thefunction\n\n\n\nf\n(\nn\n)\n\n\n{\\displaystylef(n)}\n\ntimesapositiveconstantprovidesanupperboundorlimitfortherun-timeofthatalgorithm.Inotherwords,foragiveninputsizengreaterthansomen0andaconstantc,therunningtimeofthatalgorithmwillneverbelargerthan\n\n\n\nc\n×\nf\n(\nn\n)\n\n\n{\\displaystylec\\timesf(n)}\n\n.ThisconceptisfrequentlyexpressedusingBigOnotation.Forexample,sincetherun-timeofinsertionsortgrowsquadraticallyasitsinputsizeincreases,insertionsortcanbesaidtobeoforderO(n2).\nBigOnotationisaconvenientwaytoexpresstheworst-casescenarioforagivenalgorithm,althoughitcanalsobeusedtoexpresstheaverage-case—forexample,theworst-casescenarioforquicksortisO(n2),buttheaverage-caserun-timeisO(n log n).\nAssumingtheexecutiontimefollowspowerrule,t≈kna,thecoefficientacanbefound[8]bytakingempiricalmeasurementsofruntime\n\n\n\n{\n\nt\n\n1\n\n\n,\n\nt\n\n2\n\n\n}\n\n\n{\\displaystyle\\{t_{1},t_{2}\\}}\n\natsomeproblem-sizepoints\n\n\n\n{\n\nn\n\n1\n\n\n,\n\nn\n\n2\n\n\n}\n\n\n{\\displaystyle\\{n_{1},n_{2}\\}}\n\n,andcalculating\n\n\n\n\nt\n\n2\n\n\n\n/\n\n\nt\n\n1\n\n\n=\n(\n\nn\n\n2\n\n\n\n/\n\n\nn\n\n1\n\n\n\n)\n\na\n\n\n\n\n{\\displaystylet_{2}/t_{1}=(n_{2}/n_{1})^{a}}\n\nsothat\n\n\n\na\n=\nlog\n⁡\n(\n\nt\n\n2\n\n\n\n/\n\n\nt\n\n1\n\n\n)\n\n/\n\nlog\n⁡\n(\n\nn\n\n2\n\n\n\n/\n\n\nn\n\n1\n\n\n)\n\n\n{\\displaystylea=\\log(t_{2}/t_{1})/\\log(n_{2}/n_{1})}\n\n.Inotherwords,thismeasurestheslopeoftheempiricallineonthelog\xe2\x80\x93logplotofexecutiontimevs.problemsize,atsomesizepoint.Iftheorderofgrowthindeedfollowsthepowerrule(andsothelineonlog\xe2\x80\x93logplotisindeedastraightline),theempiricalvalueofawillstayconstantatdifferentranges,andifnot,itwillchange(andthelineisacurvedline)-butstillcouldserveforcomparisonofanytwogivenalgorithmsastotheirempiricallocalordersofgrowthbehaviour.Appliedtotheabovetable:\nItisclearlyseenthatthefirstalgorithmexhibitsalinearorderofgrowthindeedfollowingthepowerrule.Theempiricalvaluesforthesecondonearediminishingrapidly,suggestingitfollowsanotherruleofgrowthandinanycasehasmuchlowerlocalordersofgrowth(andimprovingfurtherstill),empirically,thanthefirstone.\nTherun-timecomplexityfortheworst-casescenarioofagivenalgorithmcansometimesbeevaluatedbyexaminingthestructureofthealgorithmandmakingsomesimplifyingassumptions.Considerthefollowingpseudocode:\nAgivencomputerwilltakeadiscreteamountoftimetoexecuteeachoftheinstructionsinvolvedwithcarryingoutthisalgorithm.Thespecificamountoftimetocarryoutagiveninstructionwillvarydependingonwhichinstructionisbeingexecutedandwhichcomputerisexecutingit,butonaconventionalcomputer,thisamountwillbedeterministic.[9]Saythattheactionscarriedoutinstep1areconsideredtoconsumetimeT1,step2usestimeT2,andsoforth.\nInthealgorithmabove,steps1,2and7willonlyberunonce.Foraworst-caseevaluation,itshouldbeassumedthatstep3willberunaswell.Thusthetotalamountoftimetorunsteps1-3andstep7is:\nTheloopsinsteps4,5and6aretrickiertoevaluate.Theouterlooptestinstep4willexecute(n+1)\ntimes(notethatanextrastepisrequiredtoterminatetheforloop,hencen+1andnotnexecutions),whichwillconsumeT4(n+1)time.Theinnerloop,ontheotherhand,isgovernedbythevalueofj,whichiteratesfrom1toi.Onthefirstpassthroughtheouterloop,jiteratesfrom1to1:Theinnerloopmakesonepass,sorunningtheinnerloopbody(step6)consumesT6time,andtheinnerlooptest(step5)consumes2T5time.Duringthenextpassthroughtheouterloop,jiteratesfrom1to2:theinnerloopmakestwopasses,sorunningtheinnerloopbody(step6)consumes2T6time,andtheinnerlooptest(step5)consumes3T5time.\nAltogether,thetotaltimerequiredtoruntheinnerloopbodycanbeexpressedasanarithmeticprogression:\nwhichcanbefactored[10]as\nThetotaltimerequiredtoruntheouterlooptestcanbeevaluatedsimilarly:\nwhichcanbefactoredas\nTherefore,thetotalrunningtimeforthisalgorithmis:\nwhichreducesto\nAsarule-of-thumb,onecanassumethatthehighest-orderterminanygivenfunctiondominatesitsrateofgrowthandthusdefinesitsrun-timeorder.Inthisexample,n2isthehighest-orderterm,soonecanconcludethatf(n)=O(n2).Formallythiscanbeprovenasfollows:\nProvethat\n\n\n\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\nn\n)\n\n]\n\n\nT\n\n6\n\n\n+\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n\n]\n\n\nT\n\n5\n\n\n+\n(\nn\n+\n1\n)\n\nT\n\n4\n\n\n+\n\nT\n\n1\n\n\n+\n\nT\n\n2\n\n\n+\n\nT\n\n3\n\n\n+\n\nT\n\n7\n\n\n≤\nc\n\nn\n\n2\n\n\n,\n \nn\n≥\n\nn\n\n0\n\n\n\n\n{\\displaystyle\\left[{\\frac{1}{2}}(n^{2}+n)\\right]T_{6}+\\left[{\\frac{1}{2}}(n^{2}+3n)\\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\leqcn^{2},\\n\\geqn_{0}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\nn\n)\n\n]\n\n\nT\n\n6\n\n\n+\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n\n]\n\n\nT\n\n5\n\n\n+\n(\nn\n+\n1\n)\n\nT\n\n4\n\n\n+\n\nT\n\n1\n\n\n+\n\nT\n\n2\n\n\n+\n\nT\n\n3\n\n\n+\n\nT\n\n7\n\n\n\n\n\n\n≤\n\n\n\n(\n\nn\n\n2\n\n\n+\nn\n)\n\nT\n\n6\n\n\n+\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n\nT\n\n5\n\n\n+\n(\nn\n+\n1\n)\n\nT\n\n4\n\n\n+\n\nT\n\n1\n\n\n+\n\nT\n\n2\n\n\n+\n\nT\n\n3\n\n\n+\n\nT\n\n7\n\n\n \n(\n\nfor \n\nn\n≥\n0\n)\n\n\n\n\n\n\n{\\displaystyle{\\begin{aligned}&\\left[{\\frac{1}{2}}(n^{2}+n)\\right]T_{6}+\\left[{\\frac{1}{2}}(n^{2}+3n)\\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\\\\\leq&(n^{2}+n)T_{6}+(n^{2}+3n)T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\({\\text{for}}n\\geq0)\\end{aligned}}}\n\n\n\nLetkbeaconstantgreaterthanorequalto[T1..T7]\n\n\n\n\n\n\n\n\n\n\n\nT\n\n6\n\n\n(\n\nn\n\n2\n\n\n+\nn\n)\n+\n\nT\n\n5\n\n\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n+\n(\nn\n+\n1\n)\n\nT\n\n4\n\n\n+\n\nT\n\n1\n\n\n+\n\nT\n\n2\n\n\n+\n\nT\n\n3\n\n\n+\n\nT\n\n7\n\n\n≤\nk\n(\n\nn\n\n2\n\n\n+\nn\n)\n+\nk\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n+\nk\nn\n+\n5\nk\n\n\n\n\n=\n\n\n2\nk\n\nn\n\n2\n\n\n+\n5\nk\nn\n+\n5\nk\n≤\n2\nk\n\nn\n\n2\n\n\n+\n5\nk\n\nn\n\n2\n\n\n+\n5\nk\n\nn\n\n2\n\n\n \n(\n\nfor \n\nn\n≥\n1\n)\n=\n12\nk\n\nn\n\n2\n\n\n\n\n\n\n\n\n{\\displaystyle{\\begin{aligned}&T_{6}(n^{2}+n)+T_{5}(n^{2}+3n)+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\leqk(n^{2}+n)+k(n^{2}+3n)+kn+5k\\\\=&2kn^{2}+5kn+5k\\leq2kn^{2}+5kn^{2}+5kn^{2}\\({\\text{for}}n\\geq1)=12kn^{2}\\end{aligned}}}\n\n\n\nTherefore\n\n\n\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\nn\n)\n\n]\n\n\nT\n\n6\n\n\n+\n\n[\n\n\n\n1\n2\n\n\n(\n\nn\n\n2\n\n\n+\n3\nn\n)\n\n]\n\n\nT\n\n5\n\n\n+\n(\nn\n+\n1\n)\n\nT\n\n4\n\n\n+\n\nT\n\n1\n\n\n+\n\nT\n\n2\n\n\n+\n\nT\n\n3\n\n\n+\n\nT\n\n7\n\n\n≤\nc\n\nn\n\n2\n\n\n,\nn\n≥\n\nn\n\n0\n\n\n\n for \n\nc\n=\n12\nk\n,\n\nn\n\n0\n\n\n=\n1\n\n\n{\\displaystyle\\left[{\\frac{1}{2}}(n^{2}+n)\\right]T_{6}+\\left[{\\frac{1}{2}}(n^{2}+3n)\\right]T_{5}+(n+1)T_{4}+T_{1}+T_{2}+T_{3}+T_{7}\\leqcn^{2},n\\geqn_{0}{\\text{for}}c=12k,n_{0}=1}\n\n\nAmoreelegantapproachtoanalyzingthisalgorithmwouldbetodeclarethat[T1..T7]areallequaltooneunitoftime,inasystemofunitschosensothatoneunitisgreaterthanorequaltotheactualtimesforthesesteps.Thiswouldmeanthatthealgorithm\'srunningtimebreaksdownasfollows:[11]\n\n\n\n\n4\n+\n\n∑\n\ni\n=\n1\n\n\nn\n\n\ni\n≤\n4\n+\n\n∑\n\ni\n=\n1\n\n\nn\n\n\nn\n=\n4\n+\n\nn\n\n2\n\n\n≤\n5\n\nn\n\n2\n\n\n \n(\n\nfor \n\nn\n≥\n1\n)\n=\nO\n(\n\nn\n\n2\n\n\n)\n.\n\n\n{\\displaystyle4+\\sum_{i=1}^{n}i\\leq4+\\sum_{i=1}^{n}n=4+n^{2}\\leq5n^{2}\\({\\text{for}}n\\geq1)=O(n^{2}).}\n\nThemethodologyofrun-timeanalysiscanalsobeutilizedforpredictingothergrowthrates,suchasconsumptionofmemoryspace.Asanexample,considerthefollowingpseudocodewhichmanagesandreallocatesmemoryusagebyaprogrambasedonthesizeofafilewhichthatprogrammanages:\nInthisinstance,asthefilesizenincreases,memorywillbeconsumedatanexponentialgrowthrate,whichisorderO(2n).Thisisanextremelyrapidandmostlikelyunmanageablegrowthrateforconsumptionofmemoryresources.\nAlgorithmanalysisisimportantinpracticebecausetheaccidentalorunintentionaluseofaninefficientalgorithmcansignificantlyimpactsystemperformance.Intime-sensitiveapplications,analgorithmtakingtoolongtoruncanrenderitsresultsoutdatedoruseless.Aninefficientalgorithmcanalsoenduprequiringanuneconomicalamountofcomputingpowerorstorageinordertorun,againrenderingitpracticallyuseless.\nAnalysisofalgorithmstypicallyfocusesontheasymptoticperformance,particularlyattheelementarylevel,butinpracticalapplicationsconstantfactorsareimportant,andreal-worlddataisinpracticealwayslimitedinsize.Thelimitistypicallythesizeofaddressablememory,soon32-bitmachines232=4GiB(greaterifsegmentedmemoryisused)andon64-bitmachines264=16EiB.Thusgivenalimitedsize,anorderofgrowth(timeorspace)canbereplacedbyaconstantfactor,andinthissenseallpracticalalgorithmsareO(1)foralargeenoughconstant,orforsmallenoughdata.\nThisinterpretationisprimarilyusefulforfunctionsthatgrowextremelyslowly:(binary)iteratedlogarithm(log*)islessthan5forallpracticaldata(265536bits);(binary)log-log(loglogn)islessthan6forvirtuallyallpracticaldata(264bits);andbinarylog(logn)islessthan64forvirtuallyallpracticaldata(264bits).Analgorithmwithnon-constantcomplexitymaynonethelessbemoreefficientthananalgorithmwithconstantcomplexityonpracticaldataiftheoverheadoftheconstanttimealgorithmresultsinalargerconstantfactor,e.g.,onemayhave\n\n\n\nK\n>\nk\nlog\n⁡\nlog\n⁡\nn\n\n\n{\\displaystyleK>k\\log\\logn}\n\nsolongas\n\n\n\nK\n\n/\n\nk\n>\n6\n\n\n{\\displaystyleK/k>6}\n\nand\n\n\n\nn\n<\n\n2\n\n\n2\n\n6\n\n\n\n\n=\n\n2\n\n64\n\n\n\n\n{\\displaystylen<2^{2^{6}}=2^{64}}\n\n.\nForlargedatalinearorquadraticfactorscannotbeignored,butforsmalldataanasymptoticallyinefficientalgorithmmaybemoreefficient.Thisisparticularlyusedinhybridalgorithms,likeTimsort,whichuseanasymptoticallyefficientalgorithm(heremergesort,withtimecomplexity\n\n\n\nn\nlog\n⁡\nn\n\n\n{\\displaystylen\\logn}\n\n),butswitchtoanasymptoticallyinefficientalgorithm(hereinsertionsort,withtimecomplexity\n\n\n\n\nn\n\n2\n\n\n\n\n{\\displaystylen^{2}}\n\n)forsmalldata,asthesimpleralgorithmisfasteronsmalldata.\n