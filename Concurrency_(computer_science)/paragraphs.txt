Incomputerscience,concurrencyreferstotheabilityofdifferentpartsorunitsofaprogram,algorithm,orproblemtobeexecutedout-of-orderorinpartialorder,withoutaffectingthefinaloutcome.Thisallowsforparallelexecutionoftheconcurrentunits,whichcansignificantlyimproveoverallspeedoftheexecutioninmulti-processorandmulti-coresystems.Inmoretechnicalterms,concurrencyreferstothedecomposabilitypropertyofaprogram,algorithm,orproblemintoorder-independentorpartially-orderedcomponentsorunits.[1]\nAnumberofmathematicalmodelshavebeendevelopedforgeneralconcurrentcomputationincludingPetrinets,processcalculi,theparallelrandom-accessmachinemodel,theactormodelandtheReoCoordinationLanguage.\nAsLeslieLamport(2015)notes,"Whileconcurrentprogramexecutionhadbeenconsideredforyears,thecomputerscienceofconcurrencybeganwithEdsgerDijkstra\'sseminal1965paperthatintroducedthemutualexclusionproblem....Theensuingdecadeshaveseenahugegrowthofinterestinconcurrency\xe2\x80\x94particularlyindistributedsystems.Lookingbackattheoriginsofthefield,whatstandsoutisthefundamentalroleplayedbyEdsgerDijkstra".[2]\nBecausecomputationsinaconcurrentsystemcaninteractwitheachotherwhilebeingexecuted,thenumberofpossibleexecutionpathsinthesystemcanbeextremelylarge,andtheresultingoutcomecanbeindeterminate.Concurrentuseofsharedresourcescanbeasourceofindeterminacyleadingtoissuessuchasdeadlocks,andresourcestarvation.[3]\nDesignofconcurrentsystemsoftenentailsfindingreliabletechniquesforcoordinatingtheirexecution,dataexchange,memoryallocation,andexecutionschedulingtominimizeresponsetimeandmaximisethroughput.[4]\nConcurrencytheoryhasbeenanactivefieldofresearchintheoreticalcomputerscience.OneofthefirstproposalswasCarlAdamPetri\'sseminalworkonPetrinetsintheearly1960s.Intheyearssince,awidevarietyofformalismshavebeendevelopedformodelingandreasoningaboutconcurrency.\nAnumberofformalismsformodelingandunderstandingconcurrentsystemshavebeendeveloped,including:[5]\nSomeofthesemodelsofconcurrencyareprimarilyintendedtosupportreasoningandspecification,whileotherscanbeusedthroughtheentiredevelopmentcycle,includingdesign,implementation,proof,testingandsimulationofconcurrentsystems.Someofthesearebasedonmessagepassing,whileothershavedifferentmechanismsforconcurrency.\nTheproliferationofdifferentmodelsofconcurrencyhasmotivatedsomeresearcherstodevelopwaystounifythesedifferenttheoreticalmodels.Forexample,LeeandSangiovanni-Vincentellihavedemonstratedthataso-called"tagged-signal"modelcanbeusedtoprovideacommonframeworkfordefiningthedenotationalsemanticsofavarietyofdifferentmodelsofconcurrency,[7]whileNielsen,Sassone,andWinskelhavedemonstratedthatcategorytheorycanbeusedtoprovideasimilarunifiedunderstandingofdifferentmodels.[8]\nTheConcurrencyRepresentationTheoremintheactormodelprovidesafairlygeneralwaytorepresentconcurrentsystemsthatareclosedinthesensethattheydonotreceivecommunicationsfromoutside.(Otherconcurrencysystems,e.g.,processcalculicanbemodeledintheactormodelusingatwo-phasecommitprotocol.[9])ThemathematicaldenotationdenotedbyaclosedsystemSisconstructedincreasinglybetterapproximationsfromaninitialbehaviorcalled\xe2\x8a\xa5SusingabehaviorapproximatingfunctionprogressionStoconstructadenotation(meaning)forSasfollows:[10]\nInthisway,Scanbemathematicallycharacterizedintermsofallitspossiblebehaviors.\nVarioustypesoftemporallogic[11]canbeusedtohelpreasonaboutconcurrentsystems.Someoftheselogics,suchaslineartemporallogicandcomputationtreelogic,allowassertionstobemadeaboutthesequencesofstatesthataconcurrentsystemcanpassthrough.Others,suchasactioncomputationaltreelogic,Hennessy\xe2\x80\x93Milnerlogic,andLamport\'stemporallogicofactions,buildtheirassertionsfromsequencesofactions(changesinstate).Theprincipalapplicationoftheselogicsisinwritingspecificationsforconcurrentsystems.[3]\nConcurrentprogrammingencompassesprogramminglanguagesandalgorithmsusedtoimplementconcurrentsystems.Concurrentprogrammingisusuallyconsideredtobemoregeneralthanparallelprogrammingbecauseitcaninvolvearbitraryanddynamicpatternsofcommunicationandinteraction,whereasparallelsystemsgenerallyhaveapredefinedandwell-structuredcommunicationspattern.Thebasegoalsofconcurrentprogrammingincludecorrectness,performanceandrobustness.ConcurrentsystemssuchasOperatingsystemsandDatabasemanagementsystemsaregenerallydesignedtooperateindefinitely,includingautomaticrecoveryfromfailure,andnotterminateunexpectedly(seeConcurrencycontrol).Someconcurrentsystemsimplementaformoftransparentconcurrency,inwhichconcurrentcomputationalentitiesmaycompeteforandshareasingleresource,butthecomplexitiesofthiscompetitionandsharingareshieldedfromtheprogrammer.\nBecausetheyusesharedresources,concurrentsystemsingeneralrequiretheinclusionofsomekindofarbitersomewhereintheirimplementation(oftenintheunderlyinghardware),tocontrolaccesstothoseresources.Theuseofarbitersintroducesthepossibilityofindeterminacyinconcurrentcomputationwhichhasmajorimplicationsforpracticeincludingcorrectnessandperformance.Forexample,arbitrationintroducesunboundednondeterminismwhichraisesissueswithmodelcheckingbecauseitcausesexplosioninthestatespaceandcanevencausemodelstohaveaninfinitenumberofstates.\nSomeconcurrentprogrammingmodelsincludecoprocessesanddeterministicconcurrency.Inthesemodels,threadsofcontrolexplicitlyyieldtheirtimeslices,eithertothesystemortoanotherprocess.\n